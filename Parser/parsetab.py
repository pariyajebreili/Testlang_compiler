
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER COMMENT STR PLUS TIMES DIVIDE MOD MINUS LPAREN RPAREN LBRACE RBRACE LSQUAREBR RSQUAREBR COLON COMMA SEMI_COLON LESS_THAN LESS_EQUAL GREATER_THAN GREATER_EQUAL EQ NOT_EQ PARITY NOT VOID FOR IF ELSE RETURN WHILE PRINT IN TO NUM INT DEF VAR AND OR TRUE FALSE VECTOR TYPE ID\n    prog : func prog\n         | empty\n    empty :\n    func : DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE\n    \n    body : stmt \n         | stmt body\n    \n    stmt : expr SEMI_COLON\n         | defvar SEMI_COLON\n         | IF LPAREN expr RPAREN stmt\n         | IF LPAREN expr RPAREN stmt ELSE stmt\n         | WHILE LPAREN expr RPAREN stmt\n         | FOR LPAREN ID TO expr RPAREN stmt\n         | RETURN expr SEMI_COLON\n         | LBRACE body RBRACE\n    \n    defvar : VAR TYPE ID \n    \n    flist : TYPE ID\n          | TYPE ID COMMA flist\n          |\n    \n    clist : expr \n          | expr COMMA clist\n          |\n    \n    expr : VAR LPAREN clist RPAREN\n         | expr LSQUAREBR expr RSQUAREBR\n         | expr EQ expr\n         | expr PLUS expr\n         | expr MINUS expr\n         | expr TIMES expr\n         | expr DIVIDE expr\n         | expr MOD expr\n         | expr LESS_THAN expr\n         | expr GREATER_THAN expr\n         | expr PARITY expr\n         | expr NOT_EQ expr\n         | expr LESS_EQUAL expr\n         | expr GREATER_EQUAL expr\n         | expr OR expr\n         | expr AND expr\n         | NOT expr\n         | MINUS expr\n         | PLUS expr\n         | LPAREN expr RPAREN\n         | VAR\n         | NUMBER\n    '
    
_lr_action_items = {'DEF':([0,2,34,],[4,4,-4,]),'$end':([0,1,2,3,5,34,],[-3,0,-3,-2,-1,-4,]),'TYPE':([4,8,13,26,],[6,9,9,58,]),'ID':([6,9,55,58,],[7,11,81,85,]),'LPAREN':([7,14,16,17,19,22,23,24,25,26,27,28,29,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,63,82,87,88,89,91,92,93,96,97,98,99,],[8,16,16,16,16,53,54,55,16,57,16,16,16,57,-7,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-8,16,16,16,-14,-13,16,16,16,16,-9,-11,16,16,-10,-12,]),'RPAREN':([8,10,11,13,15,30,31,32,57,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,83,84,86,90,91,94,95,],[-18,12,-16,-18,-17,-43,62,-42,-21,-40,-39,-38,-41,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,87,88,90,-19,-23,-22,-21,97,-20,]),'COMMA':([11,30,32,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,84,86,90,],[13,-43,-42,-40,-39,-38,-41,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,91,-23,-22,]),'LBRACE':([12,14,17,19,36,52,63,82,87,88,92,93,96,97,98,99,],[14,17,17,17,-7,-8,-14,-13,17,17,-9,-11,17,17,-10,-12,]),'IF':([14,17,19,36,52,63,82,87,88,92,93,96,97,98,99,],[22,22,22,-7,-8,-14,-13,22,22,-9,-11,22,22,-10,-12,]),'WHILE':([14,17,19,36,52,63,82,87,88,92,93,96,97,98,99,],[23,23,23,-7,-8,-14,-13,23,23,-9,-11,23,23,-10,-12,]),'FOR':([14,17,19,36,52,63,82,87,88,92,93,96,97,98,99,],[24,24,24,-7,-8,-14,-13,24,24,-9,-11,24,24,-10,-12,]),'RETURN':([14,17,19,36,52,63,82,87,88,92,93,96,97,98,99,],[25,25,25,-7,-8,-14,-13,25,25,-9,-11,25,25,-10,-12,]),'VAR':([14,16,17,19,25,27,28,29,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,63,82,87,88,89,91,92,93,96,97,98,99,],[26,32,26,26,32,32,32,32,-7,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-8,32,32,32,-14,-13,26,26,32,32,-9,-11,26,26,-10,-12,]),'NOT':([14,16,17,19,25,27,28,29,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,63,82,87,88,89,91,92,93,96,97,98,99,],[29,29,29,29,29,29,29,29,-7,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-8,29,29,29,-14,-13,29,29,29,29,-9,-11,29,29,-10,-12,]),'MINUS':([14,16,17,19,20,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,84,86,87,88,89,90,91,92,93,94,96,97,98,99,],[28,28,28,28,40,28,-42,28,28,28,-43,40,-42,-7,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-8,28,28,40,28,40,40,40,-41,-14,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-13,40,-23,28,28,28,-22,28,-9,-11,40,28,28,-10,-12,]),'PLUS':([14,16,17,19,20,25,26,27,28,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,84,86,87,88,89,90,91,92,93,94,96,97,98,99,],[27,27,27,27,39,27,-42,27,27,27,-43,39,-42,-7,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-8,27,27,39,27,39,39,39,-41,-14,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-13,39,-23,27,27,27,-22,27,-9,-11,39,27,27,-10,-12,]),'NUMBER':([14,16,17,19,25,27,28,29,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,63,82,87,88,89,91,92,93,96,97,98,99,],[30,30,30,30,30,30,30,30,-7,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-8,30,30,30,-14,-13,30,30,30,30,-9,-11,30,30,-10,-12,]),'RBRACE':([18,19,33,35,36,52,63,82,92,93,98,99,],[34,-5,63,-6,-7,-8,-14,-13,-9,-11,-10,-12,]),'SEMI_COLON':([20,21,26,30,32,56,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85,86,90,],[36,52,-42,-43,-42,82,-40,-39,-38,-41,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-15,-23,-22,]),'LSQUAREBR':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[37,-42,-43,37,-42,37,37,37,37,-41,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-23,-22,37,]),'EQ':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[38,-42,-43,38,-42,38,38,38,38,-41,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-23,-22,38,]),'TIMES':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[41,-42,-43,41,-42,41,41,41,41,-41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-23,-22,41,]),'DIVIDE':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[42,-42,-43,42,-42,42,42,42,42,-41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-23,-22,42,]),'MOD':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[43,-42,-43,43,-42,43,43,43,43,-41,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-23,-22,43,]),'LESS_THAN':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[44,-42,-43,44,-42,44,44,44,44,-41,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-23,-22,44,]),'GREATER_THAN':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[45,-42,-43,45,-42,45,45,45,45,-41,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-23,-22,45,]),'PARITY':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[46,-42,-43,46,-42,46,46,46,46,-41,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-23,-22,46,]),'NOT_EQ':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[47,-42,-43,47,-42,47,47,47,47,-41,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-23,-22,47,]),'LESS_EQUAL':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[48,-42,-43,48,-42,48,48,48,48,-41,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-23,-22,48,]),'GREATER_EQUAL':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[49,-42,-43,49,-42,49,49,49,49,-41,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-23,-22,49,]),'OR':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[50,-42,-43,50,-42,50,50,50,50,-41,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-23,-22,50,]),'AND':([20,26,30,31,32,56,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,86,90,94,],[51,-42,-43,51,-42,51,51,51,51,-41,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-23,-22,51,]),'RSQUAREBR':([30,32,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,86,90,],[-43,-42,-40,-39,-38,-41,86,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-23,-22,]),'ELSE':([36,52,63,82,92,93,98,99,],[-7,-8,-14,-13,96,-11,-10,-12,]),'TO':([81,],[89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,2,],[1,5,]),'func':([0,2,],[2,2,]),'empty':([0,2,],[3,3,]),'flist':([8,13,],[10,15,]),'body':([14,17,19,],[18,33,35,]),'stmt':([14,17,19,87,88,96,97,],[19,19,19,92,93,98,99,]),'expr':([14,16,17,19,25,27,28,29,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,57,87,88,89,91,96,97,],[20,31,20,20,56,59,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,20,20,94,84,20,20,]),'defvar':([14,17,19,87,88,96,97,],[21,21,21,21,21,21,21,]),'clist':([57,91,],[83,95,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> func prog','prog',2,'p_program_single','parser_ply.py',190),
  ('prog -> empty','prog',1,'p_program_single','parser_ply.py',191),
  ('empty -> <empty>','empty',0,'p_empty','parser_ply.py',198),
  ('func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE','func',9,'p_func','parser_ply.py',211),
  ('body -> stmt','body',1,'p_body_function','parser_ply.py',284),
  ('body -> stmt body','body',2,'p_body_function','parser_ply.py',285),
  ('stmt -> expr SEMI_COLON','stmt',2,'p_stmt','parser_ply.py',297),
  ('stmt -> defvar SEMI_COLON','stmt',2,'p_stmt','parser_ply.py',298),
  ('stmt -> IF LPAREN expr RPAREN stmt','stmt',5,'p_stmt','parser_ply.py',299),
  ('stmt -> IF LPAREN expr RPAREN stmt ELSE stmt','stmt',7,'p_stmt','parser_ply.py',300),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt','parser_ply.py',301),
  ('stmt -> FOR LPAREN ID TO expr RPAREN stmt','stmt',7,'p_stmt','parser_ply.py',302),
  ('stmt -> RETURN expr SEMI_COLON','stmt',3,'p_stmt','parser_ply.py',303),
  ('stmt -> LBRACE body RBRACE','stmt',3,'p_stmt','parser_ply.py',304),
  ('defvar -> VAR TYPE ID','defvar',3,'p_define_variable','parser_ply.py',337),
  ('flist -> TYPE ID','flist',2,'p_variable_multiple','parser_ply.py',352),
  ('flist -> TYPE ID COMMA flist','flist',4,'p_variable_multiple','parser_ply.py',353),
  ('flist -> <empty>','flist',0,'p_variable_multiple','parser_ply.py',354),
  ('clist -> expr','clist',1,'p_variable_array','parser_ply.py',371),
  ('clist -> expr COMMA clist','clist',3,'p_variable_array','parser_ply.py',372),
  ('clist -> <empty>','clist',0,'p_variable_array','parser_ply.py',373),
  ('expr -> VAR LPAREN clist RPAREN','expr',4,'p_expr','parser_ply.py',390),
  ('expr -> expr LSQUAREBR expr RSQUAREBR','expr',4,'p_expr','parser_ply.py',391),
  ('expr -> expr EQ expr','expr',3,'p_expr','parser_ply.py',392),
  ('expr -> expr PLUS expr','expr',3,'p_expr','parser_ply.py',393),
  ('expr -> expr MINUS expr','expr',3,'p_expr','parser_ply.py',394),
  ('expr -> expr TIMES expr','expr',3,'p_expr','parser_ply.py',395),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr','parser_ply.py',396),
  ('expr -> expr MOD expr','expr',3,'p_expr','parser_ply.py',397),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr','parser_ply.py',398),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr','parser_ply.py',399),
  ('expr -> expr PARITY expr','expr',3,'p_expr','parser_ply.py',400),
  ('expr -> expr NOT_EQ expr','expr',3,'p_expr','parser_ply.py',401),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr','parser_ply.py',402),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr','parser_ply.py',403),
  ('expr -> expr OR expr','expr',3,'p_expr','parser_ply.py',404),
  ('expr -> expr AND expr','expr',3,'p_expr','parser_ply.py',405),
  ('expr -> NOT expr','expr',2,'p_expr','parser_ply.py',406),
  ('expr -> MINUS expr','expr',2,'p_expr','parser_ply.py',407),
  ('expr -> PLUS expr','expr',2,'p_expr','parser_ply.py',408),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr','parser_ply.py',409),
  ('expr -> VAR','expr',1,'p_expr','parser_ply.py',410),
  ('expr -> NUMBER','expr',1,'p_expr','parser_ply.py',411),
]
