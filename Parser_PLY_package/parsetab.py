
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'lefterrorleftANDORleftNOTLESS_EQUALGREATER_EQUALNOT_EQPARITYLESS_THANGREATER_THANleftEQQMARKCOLONleftPLUSMINUSleftTIMESDIVIDEMODleftLPARENRPARENLBRACERBRACENUM COMMENT STR IDEN PLUS TIMES DIVIDE MOD MINUS LPAREN RPAREN LBRACE RBRACE LSQUAREBR RSQUAREBR COLON COMMA SEMI_COLON LESS_THAN LESS_EQUAL GREATER_THAN GREATER_EQUAL EQ NOT_EQ PARITY NOT QMARK VOID FOR IF ELSE RETURN WHILE TO IN INT DEF VAR AND OR TRUE FALSE VECTOR NULLprog : funcprog : func progfunc : DEF type iden LPAREN flist RPAREN LBRACE body RBRACEfunc : DEF type iden LPAREN error RPAREN LBRACE body RBRACEbody : stmtbody : stmt bodystmt : expr SEMI_COLONstmt : defvar SEMI_COLONstmt : IF LPAREN expr RPAREN stmt else_choicestmt : IF LPAREN error RPAREN stmt else_choiceelse_choice : emptyelse_choice : ELSE stmtstmt : funcstmt : FOR LPAREN iden EQ expr TO expr RPAREN stmtstmt : RETURN expr SEMI_COLONstmt : LBRACE body RBRACEstmt : WHILE LPAREN expr RPAREN stmtexpr : expr LSQUAREBR expr RSQUAREBRexpr : expr LSQUAREBR error RSQUAREBRexpr : iden LPAREN clist RPARENexpr : iden LPAREN error RPARENexpr : expr QMARK expr COLON exprexpr : expr PARITY expr \n                 | expr NOT_EQ expr \n                 | expr DIVIDE expr\n                 | expr TIMES expr\n                 | expr MINUS expr\n                 | expr PLUS expr\n                 | expr MOD expr \n                 | expr GREATER_EQUAL expr \n                 | expr LESS_EQUAL expr \n                 | expr GREATER_THAN expr\n                 | expr LESS_THAN expr\n                 | expr OR expr \n                 | expr AND expr \n                 | expr EQ exprexpr : MINUS expr \n                 | PLUS expr \n                 | NOT exprexpr : LSQUAREBR clist RSQUAREBRexpr : LSQUAREBR error RSQUAREBRexpr : idenexpr : iden EQ exprexpr : numclist : emptyclist : exprclist : expr COMMA clistdefvar : VAR type idendefvar : VAR type iden EQ exprflist : emptyflist : type idenflist : type iden COMMA flistiden : IDENtype : INT\n                | VECTOR\n                | NULLnum : NUMempty :'
    
_lr_action_items = {'DEF':([0,2,20,21,24,26,30,45,47,64,77,81,102,113,114,116,120,121,123,125,126,127,128,130,132,133,],[3,3,3,3,3,3,-13,-3,-7,-8,-4,-16,-15,3,3,3,-58,-58,-17,-9,-11,3,-10,-12,3,-14,]),'$end':([1,2,4,45,77,],[0,-1,-2,-3,-4,]),'INT':([3,11,19,39,],[6,6,6,6,]),'VECTOR':([3,11,19,39,],[7,7,7,7,]),'NULL':([3,11,19,39,],[8,8,8,8,]),'IDEN':([5,6,7,8,12,20,21,24,26,30,32,34,35,36,37,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,76,77,81,102,106,112,113,114,115,116,118,120,121,123,125,126,127,128,129,130,132,133,],[10,-54,-55,-56,10,10,10,10,10,-13,10,10,10,10,10,10,10,-3,-7,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-8,10,10,10,10,-4,-16,-15,10,10,10,10,10,10,10,-58,-58,-17,-9,-11,10,-10,10,-12,10,-14,]),'LPAREN':([9,10,23,29,31,33,],[11,-53,42,65,66,68,]),'COMMA':([10,16,23,38,40,72,73,74,75,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,104,105,108,109,110,111,119,],[-53,19,-42,-44,-57,106,-37,-38,-39,-43,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-40,-41,-20,-21,-18,-19,-22,]),'RPAREN':([10,11,13,14,15,16,19,22,23,38,40,42,71,72,73,74,75,78,79,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,103,104,105,106,108,109,110,111,117,119,131,],[-53,-58,17,18,-50,-51,-58,-52,-42,-44,-57,-58,-45,-46,-37,-38,-39,108,109,-43,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,113,114,116,-40,-41,-58,-20,-21,-18,-19,-47,-22,132,]),'EQ':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,103,104,105,107,108,109,110,111,119,122,124,131,],[-53,43,63,-44,-57,63,63,-37,-38,63,-43,63,63,63,63,-25,-26,-27,-28,-29,63,63,63,63,63,63,-36,63,115,63,-40,-41,118,-20,-21,-18,-19,-22,63,63,63,]),'SEMI_COLON':([10,23,27,28,38,40,67,73,74,75,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,104,105,107,108,109,110,111,119,124,],[-53,-42,47,64,-44,-57,102,-37,-38,-39,-43,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-40,-41,-48,-20,-21,-18,-19,-22,-49,]),'LSQUAREBR':([10,20,21,23,24,26,27,30,32,34,35,36,37,38,40,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,74,75,77,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,],[-53,34,34,-42,34,34,48,-13,34,34,34,34,34,-44,-57,34,34,-3,-7,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-8,34,48,34,48,-37,-38,-39,-4,-43,-16,48,48,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,48,-15,48,-40,-41,34,-20,-21,-18,-19,34,34,34,34,34,34,-22,-58,-58,48,-17,48,-9,-11,34,-10,34,-12,48,34,-14,]),'QMARK':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,49,-44,-57,49,49,-37,-38,49,-43,49,49,49,49,-25,-26,-27,-28,-29,49,49,49,49,49,49,-36,49,49,-40,-41,-20,-21,-18,-19,-22,49,49,49,]),'PARITY':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,50,-44,-57,50,50,-37,-38,-39,-43,50,50,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,50,50,-36,50,50,-40,-41,-20,-21,-18,-19,-22,50,50,50,]),'NOT_EQ':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,51,-44,-57,51,51,-37,-38,-39,-43,51,51,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,51,51,-36,51,51,-40,-41,-20,-21,-18,-19,-22,51,51,51,]),'DIVIDE':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,52,-44,-57,52,52,52,52,52,52,52,52,52,52,-25,-26,52,52,-29,52,52,52,52,52,52,52,52,52,-40,-41,-20,-21,-18,-19,52,52,52,52,]),'TIMES':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,53,-44,-57,53,53,53,53,53,53,53,53,53,53,-25,-26,53,53,-29,53,53,53,53,53,53,53,53,53,-40,-41,-20,-21,-18,-19,53,53,53,53,]),'MINUS':([10,20,21,23,24,26,27,30,32,34,35,36,37,38,40,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,74,75,77,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,],[-53,35,35,-42,35,35,54,-13,35,35,35,35,35,-44,-57,35,35,-3,-7,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-8,35,54,35,54,-37,-38,54,-4,54,-16,54,54,54,54,-25,-26,-27,-28,-29,54,54,54,54,54,54,54,54,-15,54,-40,-41,35,-20,-21,-18,-19,35,35,35,35,35,35,54,-58,-58,54,-17,54,-9,-11,35,-10,35,-12,54,35,-14,]),'PLUS':([10,20,21,23,24,26,27,30,32,34,35,36,37,38,40,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,72,73,74,75,77,80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,105,106,108,109,110,111,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,],[-53,36,36,-42,36,36,55,-13,36,36,36,36,36,-44,-57,36,36,-3,-7,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-8,36,55,36,55,-37,-38,55,-4,55,-16,55,55,55,55,-25,-26,-27,-28,-29,55,55,55,55,55,55,55,55,-15,55,-40,-41,36,-20,-21,-18,-19,36,36,36,36,36,36,55,-58,-58,55,-17,55,-9,-11,36,-10,36,-12,55,36,-14,]),'MOD':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,56,-44,-57,56,56,56,56,56,56,56,56,56,56,-25,-26,56,56,-29,56,56,56,56,56,56,56,56,56,-40,-41,-20,-21,-18,-19,56,56,56,56,]),'GREATER_EQUAL':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,57,-44,-57,57,57,-37,-38,-39,-43,57,57,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,57,57,-36,57,57,-40,-41,-20,-21,-18,-19,-22,57,57,57,]),'LESS_EQUAL':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,58,-44,-57,58,58,-37,-38,-39,-43,58,58,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,58,58,-36,58,58,-40,-41,-20,-21,-18,-19,-22,58,58,58,]),'GREATER_THAN':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,59,-44,-57,59,59,-37,-38,-39,-43,59,59,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,59,59,-36,59,59,-40,-41,-20,-21,-18,-19,-22,59,59,59,]),'LESS_THAN':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,60,-44,-57,60,60,-37,-38,-39,-43,60,60,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,60,60,-36,60,60,-40,-41,-20,-21,-18,-19,-22,60,60,60,]),'OR':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,61,-44,-57,61,61,-37,-38,-39,-43,61,61,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,61,61,-40,-41,-20,-21,-18,-19,-22,61,61,61,]),'AND':([10,23,27,38,40,67,72,73,74,75,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,104,105,108,109,110,111,119,122,124,131,],[-53,-42,62,-44,-57,62,62,-37,-38,-39,-43,62,62,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,62,62,-40,-41,-20,-21,-18,-19,-22,62,62,62,]),'RSQUAREBR':([10,23,34,38,40,69,70,71,72,73,74,75,80,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,104,105,106,108,109,110,111,117,119,],[-53,-42,-58,-44,-57,104,105,-45,-46,-37,-38,-39,-43,110,111,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-40,-41,-58,-20,-21,-18,-19,-47,-22,]),'COLON':([10,23,38,40,73,74,75,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,104,105,108,109,110,111,119,],[-53,-42,-44,-57,-37,-38,-39,-43,112,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-40,-41,-20,-21,-18,-19,-22,]),'TO':([10,23,38,40,73,74,75,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,104,105,108,109,110,111,119,122,],[-53,-42,-44,-57,-37,-38,-39,-43,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-40,-41,-20,-21,-18,-19,-22,129,]),'error':([11,34,42,48,65,],[14,70,79,83,100,]),'LBRACE':([17,18,20,21,24,26,30,45,47,64,77,81,102,113,114,116,120,121,123,125,126,127,128,130,132,133,],[20,21,24,24,24,24,-13,-3,-7,-8,-4,-16,-15,24,24,24,-58,-58,-17,-9,-11,24,-10,-12,24,-14,]),'IF':([20,21,24,26,30,45,47,64,77,81,102,113,114,116,120,121,123,125,126,127,128,130,132,133,],[29,29,29,29,-13,-3,-7,-8,-4,-16,-15,29,29,29,-58,-58,-17,-9,-11,29,-10,-12,29,-14,]),'FOR':([20,21,24,26,30,45,47,64,77,81,102,113,114,116,120,121,123,125,126,127,128,130,132,133,],[31,31,31,31,-13,-3,-7,-8,-4,-16,-15,31,31,31,-58,-58,-17,-9,-11,31,-10,-12,31,-14,]),'RETURN':([20,21,24,26,30,45,47,64,77,81,102,113,114,116,120,121,123,125,126,127,128,130,132,133,],[32,32,32,32,-13,-3,-7,-8,-4,-16,-15,32,32,32,-58,-58,-17,-9,-11,32,-10,-12,32,-14,]),'WHILE':([20,21,24,26,30,45,47,64,77,81,102,113,114,116,120,121,123,125,126,127,128,130,132,133,],[33,33,33,33,-13,-3,-7,-8,-4,-16,-15,33,33,33,-58,-58,-17,-9,-11,33,-10,-12,33,-14,]),'NOT':([20,21,24,26,30,32,34,35,36,37,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,77,81,102,106,112,113,114,115,116,118,120,121,123,125,126,127,128,129,130,132,133,],[37,37,37,37,-13,37,37,37,37,37,37,37,-3,-7,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-8,37,37,-4,-16,-15,37,37,37,37,37,37,37,-58,-58,-17,-9,-11,37,-10,37,-12,37,-14,]),'VAR':([20,21,24,26,30,45,47,64,77,81,102,113,114,116,120,121,123,125,126,127,128,130,132,133,],[39,39,39,39,-13,-3,-7,-8,-4,-16,-15,39,39,39,-58,-58,-17,-9,-11,39,-10,-12,39,-14,]),'NUM':([20,21,24,26,30,32,34,35,36,37,42,43,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,77,81,102,106,112,113,114,115,116,118,120,121,123,125,126,127,128,129,130,132,133,],[40,40,40,40,-13,40,40,40,40,40,40,40,-3,-7,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-8,40,40,-4,-16,-15,40,40,40,40,40,40,40,-58,-58,-17,-9,-11,40,-10,40,-12,40,-14,]),'RBRACE':([25,26,30,41,44,45,46,47,64,77,81,102,120,121,123,125,126,128,130,133,],[45,-5,-13,77,81,-3,-6,-7,-8,-4,-16,-15,-58,-58,-17,-9,-11,-10,-12,-14,]),'ELSE':([30,45,47,64,77,81,102,120,121,123,125,126,128,130,133,],[-13,-3,-7,-8,-4,-16,-15,127,127,-17,-9,-11,-10,-12,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,2,],[1,4,]),'func':([0,2,20,21,24,26,113,114,116,127,132,],[2,2,30,30,30,30,30,30,30,30,30,]),'type':([3,11,19,39,],[5,12,12,76,]),'iden':([5,12,20,21,24,26,32,34,35,36,37,42,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,76,106,112,113,114,115,116,118,127,129,132,],[9,16,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,101,23,107,23,23,23,23,23,23,23,23,23,23,]),'flist':([11,19,],[13,22,]),'empty':([11,19,34,42,106,120,121,],[15,15,71,71,71,126,126,]),'body':([20,21,24,26,],[25,41,44,46,]),'stmt':([20,21,24,26,113,114,116,127,132,],[26,26,26,26,120,121,123,130,133,]),'expr':([20,21,24,26,32,34,35,36,37,42,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,106,112,113,114,115,116,118,127,129,132,],[27,27,27,27,67,72,73,74,75,72,80,82,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,103,72,119,27,27,122,27,124,27,131,27,]),'defvar':([20,21,24,26,113,114,116,127,132,],[28,28,28,28,28,28,28,28,28,]),'num':([20,21,24,26,32,34,35,36,37,42,43,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,106,112,113,114,115,116,118,127,129,132,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'clist':([34,42,106,],[69,78,117,]),'else_choice':([120,121,],[125,128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> func','prog',1,'p_prog1','grammer.py',17),
  ('prog -> func prog','prog',2,'p_prog2','grammer.py',31),
  ('func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE','func',9,'p_func','grammer.py',46),
  ('func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE','func',9,'p_func_error','grammer.py',59),
  ('body -> stmt','body',1,'p_body1','grammer.py',72),
  ('body -> stmt body','body',2,'p_body2','grammer.py',82),
  ('stmt -> expr SEMI_COLON','stmt',2,'p_stmt1','grammer.py',94),
  ('stmt -> defvar SEMI_COLON','stmt',2,'p_stmt2','grammer.py',105),
  ('stmt -> IF LPAREN expr RPAREN stmt else_choice','stmt',6,'p_stmt3','grammer.py',117),
  ('stmt -> IF LPAREN error RPAREN stmt else_choice','stmt',6,'p_stmt3_error','grammer.py',128),
  ('else_choice -> empty','else_choice',1,'p_else_choice1','grammer.py',142),
  ('else_choice -> ELSE stmt','else_choice',2,'p_else_choice2','grammer.py',152),
  ('stmt -> func','stmt',1,'p_stmt4','grammer.py',163),
  ('stmt -> FOR LPAREN iden EQ expr TO expr RPAREN stmt','stmt',9,'p_stmt5','grammer.py',174),
  ('stmt -> RETURN expr SEMI_COLON','stmt',3,'p_stmt6','grammer.py',185),
  ('stmt -> LBRACE body RBRACE','stmt',3,'p_stmt7','grammer.py',195),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_stmt8','grammer.py',206),
  ('expr -> expr LSQUAREBR expr RSQUAREBR','expr',4,'p_expr1','grammer.py',217),
  ('expr -> expr LSQUAREBR error RSQUAREBR','expr',4,'p_expr1_error','grammer.py',228),
  ('expr -> iden LPAREN clist RPAREN','expr',4,'p_expr2','grammer.py',243),
  ('expr -> iden LPAREN error RPAREN','expr',4,'p_expr2_error','grammer.py',253),
  ('expr -> expr QMARK expr COLON expr','expr',5,'p_expr3','grammer.py',268),
  ('expr -> expr PARITY expr','expr',3,'p_expr4','grammer.py',278),
  ('expr -> expr NOT_EQ expr','expr',3,'p_expr4','grammer.py',279),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr4','grammer.py',280),
  ('expr -> expr TIMES expr','expr',3,'p_expr4','grammer.py',281),
  ('expr -> expr MINUS expr','expr',3,'p_expr4','grammer.py',282),
  ('expr -> expr PLUS expr','expr',3,'p_expr4','grammer.py',283),
  ('expr -> expr MOD expr','expr',3,'p_expr4','grammer.py',284),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr4','grammer.py',285),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr4','grammer.py',286),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr4','grammer.py',287),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr4','grammer.py',288),
  ('expr -> expr OR expr','expr',3,'p_expr4','grammer.py',289),
  ('expr -> expr AND expr','expr',3,'p_expr4','grammer.py',290),
  ('expr -> expr EQ expr','expr',3,'p_expr4','grammer.py',291),
  ('expr -> MINUS expr','expr',2,'p_expr5','grammer.py',301),
  ('expr -> PLUS expr','expr',2,'p_expr5','grammer.py',302),
  ('expr -> NOT expr','expr',2,'p_expr5','grammer.py',303),
  ('expr -> LSQUAREBR clist RSQUAREBR','expr',3,'p_expr6','grammer.py',313),
  ('expr -> LSQUAREBR error RSQUAREBR','expr',3,'p_expr6_error','grammer.py',323),
  ('expr -> iden','expr',1,'p_expr7','grammer.py',337),
  ('expr -> iden EQ expr','expr',3,'p_expr8','grammer.py',349),
  ('expr -> num','expr',1,'p_expr9','grammer.py',361),
  ('clist -> empty','clist',1,'p_clist1','grammer.py',374),
  ('clist -> expr','clist',1,'p_clist2','grammer.py',384),
  ('clist -> expr COMMA clist','clist',3,'p_clist3','grammer.py',394),
  ('defvar -> VAR type iden','defvar',3,'p_defvar1','grammer.py',407),
  ('defvar -> VAR type iden EQ expr','defvar',5,'p_defvar2','grammer.py',420),
  ('flist -> empty','flist',1,'p_flist1','grammer.py',432),
  ('flist -> type iden','flist',2,'p_flist2','grammer.py',442),
  ('flist -> type iden COMMA flist','flist',4,'p_flist3','grammer.py',452),
  ('iden -> IDEN','iden',1,'p_iden','grammer.py',464),
  ('type -> INT','type',1,'p_type','grammer.py',476),
  ('type -> VECTOR','type',1,'p_type','grammer.py',477),
  ('type -> NULL','type',1,'p_type','grammer.py',478),
  ('num -> NUM','num',1,'p_num','grammer.py',490),
  ('empty -> <empty>','empty',0,'p_empty','grammer.py',500),
]
