
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUMBER COMMENT STR PLUS TIMES DIVIDE MOD MINUS LPAREN RPAREN LBRACE RBRACE LSQUAREBR RSQUAREBR COLON COMMA SEMI_COLON LESS_THAN LESS_EQUAL GREATER_THAN GREATER_EQUAL EQ NOT_EQ PARITY NOT VOID FOR IF ELSE RETURN WHILE PRINT IN TO NUM INT DEF VAR AND OR TRUE FALSE VECTOR TYPE ID\n    prog : func\n    \n    prog : func prog\n    \n    func : DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE\n    \n    body : stmt \n         | stmt body\n    \n    stmt : expr SEMI_COLON\n         | defvar SEMI_COLON\n         | IF LPAREN expr RPAREN stmt\n         | IF LPAREN expr RPAREN stmt ELSE stmt\n         | WHILE LPAREN expr RPAREN stmt\n         | FOR LPAREN ID TO expr RPAREN stmt\n         | RETURN expr SEMI_COLON\n         | LBRACE body RBRACE\n    \n    defvar : VAR TYPE ID \n    \n    flist : TYPE ID\n          | TYPE ID COMMA flist\n          |\n    \n    clist : expr \n          | expr COMMA clist\n          |\n    \n    expr : VAR LPAREN clist RPAREN\n         | expr LSQUAREBR expr RSQUAREBR\n         | expr EQ expr\n         | expr PLUS expr\n         | expr MINUS expr\n         | expr TIMES expr\n         | expr DIVIDE expr\n         | expr MOD expr\n         | expr LESS_THAN expr\n         | expr GREATER_THAN expr\n         | expr PARITY expr\n         | expr NOT_EQ expr\n         | expr LESS_EQUAL expr\n         | expr GREATER_EQUAL expr\n         | expr OR expr\n         | expr AND expr\n         | NOT expr\n         | MINUS expr\n         | PLUS expr\n         | LPAREN expr RPAREN\n         | VAR\n         | NUMBER\n    '
    
_lr_action_items = {'DEF':([0,2,33,],[3,3,-3,]),'$end':([1,2,4,33,],[0,-1,-2,-3,]),'TYPE':([3,7,12,25,],[5,8,8,57,]),'ID':([5,8,54,57,],[6,10,80,84,]),'LPAREN':([6,13,15,16,18,21,22,23,24,25,26,27,28,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,62,81,86,87,88,90,91,92,95,96,97,98,],[7,15,15,15,15,52,53,54,15,56,15,15,15,56,-6,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-7,15,15,15,-13,-12,15,15,15,15,-8,-10,15,15,-9,-11,]),'RPAREN':([7,9,10,12,14,29,30,31,56,58,59,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,82,83,85,89,90,93,94,],[-17,11,-15,-17,-16,-42,61,-41,-20,-39,-38,-37,-40,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,86,87,89,-18,-22,-21,-20,96,-19,]),'COMMA':([10,29,31,58,59,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,85,89,],[12,-42,-41,-39,-38,-37,-40,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,90,-22,-21,]),'LBRACE':([11,13,16,18,35,51,62,81,86,87,91,92,95,96,97,98,],[13,16,16,16,-6,-7,-13,-12,16,16,-8,-10,16,16,-9,-11,]),'IF':([13,16,18,35,51,62,81,86,87,91,92,95,96,97,98,],[21,21,21,-6,-7,-13,-12,21,21,-8,-10,21,21,-9,-11,]),'WHILE':([13,16,18,35,51,62,81,86,87,91,92,95,96,97,98,],[22,22,22,-6,-7,-13,-12,22,22,-8,-10,22,22,-9,-11,]),'FOR':([13,16,18,35,51,62,81,86,87,91,92,95,96,97,98,],[23,23,23,-6,-7,-13,-12,23,23,-8,-10,23,23,-9,-11,]),'RETURN':([13,16,18,35,51,62,81,86,87,91,92,95,96,97,98,],[24,24,24,-6,-7,-13,-12,24,24,-8,-10,24,24,-9,-11,]),'VAR':([13,15,16,18,24,26,27,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,62,81,86,87,88,90,91,92,95,96,97,98,],[25,31,25,25,31,31,31,31,-6,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-7,31,31,31,-13,-12,25,25,31,31,-8,-10,25,25,-9,-11,]),'NOT':([13,15,16,18,24,26,27,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,62,81,86,87,88,90,91,92,95,96,97,98,],[28,28,28,28,28,28,28,28,-6,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-7,28,28,28,-13,-12,28,28,28,28,-8,-10,28,28,-9,-11,]),'MINUS':([13,15,16,18,19,24,25,26,27,28,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,86,87,88,89,90,91,92,93,95,96,97,98,],[27,27,27,27,39,27,-41,27,27,27,-42,39,-41,-6,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-7,27,27,39,27,39,39,39,-40,-13,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-12,39,-22,27,27,27,-21,27,-8,-10,39,27,27,-9,-11,]),'PLUS':([13,15,16,18,19,24,25,26,27,28,29,30,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,83,85,86,87,88,89,90,91,92,93,95,96,97,98,],[26,26,26,26,38,26,-41,26,26,26,-42,38,-41,-6,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-7,26,26,38,26,38,38,38,-40,-13,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-12,38,-22,26,26,26,-21,26,-8,-10,38,26,26,-9,-11,]),'NUMBER':([13,15,16,18,24,26,27,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,56,62,81,86,87,88,90,91,92,95,96,97,98,],[29,29,29,29,29,29,29,29,-6,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-7,29,29,29,-13,-12,29,29,29,29,-8,-10,29,29,-9,-11,]),'RBRACE':([17,18,32,34,35,51,62,81,91,92,97,98,],[33,-4,62,-5,-6,-7,-13,-12,-8,-10,-9,-11,]),'SEMI_COLON':([19,20,25,29,31,55,58,59,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,84,85,89,],[35,51,-41,-42,-41,81,-39,-38,-37,-40,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-14,-22,-21,]),'LSQUAREBR':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[36,-41,-42,36,-41,36,36,36,36,-40,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-22,-21,36,]),'EQ':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[37,-41,-42,37,-41,37,37,37,37,-40,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-22,-21,37,]),'TIMES':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[40,-41,-42,40,-41,40,40,40,40,-40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-22,-21,40,]),'DIVIDE':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[41,-41,-42,41,-41,41,41,41,41,-40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-22,-21,41,]),'MOD':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[42,-41,-42,42,-41,42,42,42,42,-40,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-22,-21,42,]),'LESS_THAN':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[43,-41,-42,43,-41,43,43,43,43,-40,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-22,-21,43,]),'GREATER_THAN':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[44,-41,-42,44,-41,44,44,44,44,-40,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-22,-21,44,]),'PARITY':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[45,-41,-42,45,-41,45,45,45,45,-40,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-22,-21,45,]),'NOT_EQ':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[46,-41,-42,46,-41,46,46,46,46,-40,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-22,-21,46,]),'LESS_EQUAL':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[47,-41,-42,47,-41,47,47,47,47,-40,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-22,-21,47,]),'GREATER_EQUAL':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[48,-41,-42,48,-41,48,48,48,48,-40,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-22,-21,48,]),'OR':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[49,-41,-42,49,-41,49,49,49,49,-40,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-22,-21,49,]),'AND':([19,25,29,30,31,55,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,85,89,93,],[50,-41,-42,50,-41,50,50,50,50,-40,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-22,-21,50,]),'RSQUAREBR':([29,31,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,85,89,],[-42,-41,-39,-38,-37,-40,85,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-22,-21,]),'ELSE':([35,51,62,81,91,92,97,98,],[-6,-7,-13,-12,95,-10,-9,-11,]),'TO':([80,],[88,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,2,],[1,4,]),'func':([0,2,],[2,2,]),'flist':([7,12,],[9,14,]),'body':([13,16,18,],[17,32,34,]),'stmt':([13,16,18,86,87,95,96,],[18,18,18,91,92,97,98,]),'expr':([13,15,16,18,24,26,27,28,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,56,86,87,88,90,95,96,],[19,30,19,19,55,58,59,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,83,19,19,93,83,19,19,]),'defvar':([13,16,18,86,87,95,96,],[20,20,20,20,20,20,20,]),'clist':([56,90,],[82,94,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> func','prog',1,'p_program_single','parser_ply.py',218),
  ('prog -> func prog','prog',2,'p_program_multiple','parser_ply.py',226),
  ('func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE','func',9,'p_function','parser_ply.py',233),
  ('body -> stmt','body',1,'p_body_function','parser_ply.py',303),
  ('body -> stmt body','body',2,'p_body_function','parser_ply.py',304),
  ('stmt -> expr SEMI_COLON','stmt',2,'p_statement','parser_ply.py',316),
  ('stmt -> defvar SEMI_COLON','stmt',2,'p_statement','parser_ply.py',317),
  ('stmt -> IF LPAREN expr RPAREN stmt','stmt',5,'p_statement','parser_ply.py',318),
  ('stmt -> IF LPAREN expr RPAREN stmt ELSE stmt','stmt',7,'p_statement','parser_ply.py',319),
  ('stmt -> WHILE LPAREN expr RPAREN stmt','stmt',5,'p_statement','parser_ply.py',320),
  ('stmt -> FOR LPAREN ID TO expr RPAREN stmt','stmt',7,'p_statement','parser_ply.py',321),
  ('stmt -> RETURN expr SEMI_COLON','stmt',3,'p_statement','parser_ply.py',322),
  ('stmt -> LBRACE body RBRACE','stmt',3,'p_statement','parser_ply.py',323),
  ('defvar -> VAR TYPE ID','defvar',3,'p_define_variable','parser_ply.py',356),
  ('flist -> TYPE ID','flist',2,'p_variable_multiple','parser_ply.py',371),
  ('flist -> TYPE ID COMMA flist','flist',4,'p_variable_multiple','parser_ply.py',372),
  ('flist -> <empty>','flist',0,'p_variable_multiple','parser_ply.py',373),
  ('clist -> expr','clist',1,'p_variable_array','parser_ply.py',390),
  ('clist -> expr COMMA clist','clist',3,'p_variable_array','parser_ply.py',391),
  ('clist -> <empty>','clist',0,'p_variable_array','parser_ply.py',392),
  ('expr -> VAR LPAREN clist RPAREN','expr',4,'p_define_expression','parser_ply.py',409),
  ('expr -> expr LSQUAREBR expr RSQUAREBR','expr',4,'p_define_expression','parser_ply.py',410),
  ('expr -> expr EQ expr','expr',3,'p_define_expression','parser_ply.py',411),
  ('expr -> expr PLUS expr','expr',3,'p_define_expression','parser_ply.py',412),
  ('expr -> expr MINUS expr','expr',3,'p_define_expression','parser_ply.py',413),
  ('expr -> expr TIMES expr','expr',3,'p_define_expression','parser_ply.py',414),
  ('expr -> expr DIVIDE expr','expr',3,'p_define_expression','parser_ply.py',415),
  ('expr -> expr MOD expr','expr',3,'p_define_expression','parser_ply.py',416),
  ('expr -> expr LESS_THAN expr','expr',3,'p_define_expression','parser_ply.py',417),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_define_expression','parser_ply.py',418),
  ('expr -> expr PARITY expr','expr',3,'p_define_expression','parser_ply.py',419),
  ('expr -> expr NOT_EQ expr','expr',3,'p_define_expression','parser_ply.py',420),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_define_expression','parser_ply.py',421),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_define_expression','parser_ply.py',422),
  ('expr -> expr OR expr','expr',3,'p_define_expression','parser_ply.py',423),
  ('expr -> expr AND expr','expr',3,'p_define_expression','parser_ply.py',424),
  ('expr -> NOT expr','expr',2,'p_define_expression','parser_ply.py',425),
  ('expr -> MINUS expr','expr',2,'p_define_expression','parser_ply.py',426),
  ('expr -> PLUS expr','expr',2,'p_define_expression','parser_ply.py',427),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_define_expression','parser_ply.py',428),
  ('expr -> VAR','expr',1,'p_define_expression','parser_ply.py',429),
  ('expr -> NUMBER','expr',1,'p_define_expression','parser_ply.py',430),
]
