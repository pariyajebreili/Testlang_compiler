
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'lefterrorleftANDORleftNOTLESS_EQUALGREATER_EQUALNOT_EQPARITYLESS_THANGREATER_THANleftEQQMARKCOLONleftPLUSMINUSleftTIMESDIVIDEMODleftLPARENRPARENLBRACERBRACENUMBER COMMENT STR IDEN PLUS TIMES DIVIDE MOD MINUS LPAREN RPAREN LBRACE RBRACE LSQUAREBR RSQUAREBR COLON COMMA SEMI_COLON LESS_THAN LESS_EQUAL GREATER_THAN GREATER_EQUAL EQ NOT_EQ PARITY NOT QMARK VOID FOR IF ELSE RETURN WHILE PRINT TO IN NUM INT DEF VAR AND OR TRUE FALSE VECTOR NULLprog : emptyprog : func progfunc : DEF type iden LPAREN flist RPAREN LBRACE body RBRACEfunc : DEF type iden LPAREN error RPAREN LBRACE body RBRACEbody : stmtbody : stmt bodystmt : expr SEMI_COLONstmt : defvar SEMI_COLONstmt : IF LPAREN expr RPAREN stmt else_choicestmt : IF LPAREN error RPAREN stmt else_choiceelse_choice : emptyelse_choice : ELSE stmtexpr : expr LSQUAREBR expr RSQUAREBRexpr : expr LSQUAREBR error RSQUAREBRexpr : iden LPAREN clist RPARENexpr : iden LPAREN error RPARENexpr : expr QMARK expr COLON exprexpr : expr PARITY expr \n                 | expr NOT_EQ expr \n                 | expr DIVIDE expr\n                 | expr TIMES expr\n                 | expr MINUS expr\n                 | expr PLUS expr\n                 | expr MOD expr \n                 | expr GREATER_EQUAL expr \n                 | expr LESS_EQUAL expr \n                 | expr GREATER_THAN expr\n                 | expr LESS_THAN expr\n                 | expr OR expr \n                 | expr AND expr \n                 | expr EQ exprexpr : MINUS expr \n                 | PLUS expr \n                 | NOT exprexpr : LSQUAREBR clist RSQUAREBRexpr : LSQUAREBR error RSQUAREBRexpr : idenexpr : iden EQ exprexpr : numclist : emptyclist : exprclist : expr COMMA clistdefvar : VAR type idendefvar : VAR type iden EQ exprflist : emptyflist : type idenflist : type iden COMMA flistiden : IDENtype : INT\n                | VECTOR\n                | NULLnum : NUMempty :'
    
_lr_action_items = {'$end':([0,1,2,3,5,40,69,],[-53,0,-1,-53,-2,-3,-4,]),'DEF':([0,3,40,69,],[4,4,-3,-4,]),'INT':([4,12,20,35,],[7,7,7,7,]),'VECTOR':([4,12,20,35,],[8,8,8,8,]),'NULL':([4,12,20,35,],[9,9,9,9,]),'IDEN':([6,7,8,9,13,21,22,26,30,31,32,33,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,68,94,100,101,102,104,106,107,109,110,111,112,113,],[11,-49,-50,-51,11,11,11,11,11,11,11,11,11,11,-7,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-8,11,11,11,11,11,11,11,-53,-53,-9,-11,11,-10,-12,]),'LPAREN':([10,11,24,29,],[12,-48,38,60,]),'COMMA':([11,17,24,34,36,64,65,66,67,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,96,97,98,99,105,],[-48,20,-37,-39,-52,94,-32,-33,-34,-38,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-35,-36,-15,-16,-13,-14,-17,]),'RPAREN':([11,12,14,15,16,17,20,23,24,34,36,38,63,64,65,66,67,70,71,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,98,99,103,105,],[-48,-53,18,19,-45,-46,-53,-47,-37,-39,-52,-53,-40,-41,-32,-33,-34,96,97,-38,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,101,102,-35,-36,-53,-15,-16,-13,-14,-42,-17,]),'EQ':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,95,96,97,98,99,105,108,],[-48,39,58,-39,-52,58,-32,-33,58,-38,58,58,58,58,-20,-21,-22,-23,-24,58,58,58,58,58,58,-31,58,-35,-36,104,-15,-16,-13,-14,-17,58,]),'SEMI_COLON':([11,24,27,28,34,36,65,66,67,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,95,96,97,98,99,105,108,],[-48,-37,42,59,-39,-52,-32,-33,-34,-38,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-35,-36,-43,-15,-16,-13,-14,-17,-44,]),'LSQUAREBR':([11,21,22,24,26,27,30,31,32,33,34,36,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,],[-48,30,30,-37,30,43,30,30,30,30,-39,-52,30,30,-7,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-8,30,43,-32,-33,-34,-38,43,43,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,43,-35,-36,30,-15,-16,-13,-14,30,30,30,30,-17,-53,-53,43,-9,-11,30,-10,-12,]),'QMARK':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,44,-39,-52,44,-32,-33,44,-38,44,44,44,44,-20,-21,-22,-23,-24,44,44,44,44,44,44,-31,44,-35,-36,-15,-16,-13,-14,-17,44,]),'PARITY':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,45,-39,-52,45,-32,-33,-34,-38,45,45,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,45,45,-31,45,-35,-36,-15,-16,-13,-14,-17,45,]),'NOT_EQ':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,46,-39,-52,46,-32,-33,-34,-38,46,46,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,46,46,-31,46,-35,-36,-15,-16,-13,-14,-17,46,]),'DIVIDE':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,47,-39,-52,47,47,47,47,47,47,47,47,47,-20,-21,47,47,-24,47,47,47,47,47,47,47,47,-35,-36,-15,-16,-13,-14,47,47,]),'TIMES':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,48,-39,-52,48,48,48,48,48,48,48,48,48,-20,-21,48,48,-24,48,48,48,48,48,48,48,48,-35,-36,-15,-16,-13,-14,48,48,]),'MINUS':([11,21,22,24,26,27,30,31,32,33,34,36,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,],[-48,31,31,-37,31,49,31,31,31,31,-39,-52,31,31,-7,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-8,31,49,-32,-33,49,49,49,49,49,49,-20,-21,-22,-23,-24,49,49,49,49,49,49,49,49,-35,-36,31,-15,-16,-13,-14,31,31,31,31,49,-53,-53,49,-9,-11,31,-10,-12,]),'PLUS':([11,21,22,24,26,27,30,31,32,33,34,36,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,94,96,97,98,99,100,101,102,104,105,106,107,108,109,110,111,112,113,],[-48,32,32,-37,32,50,32,32,32,32,-39,-52,32,32,-7,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-8,32,50,-32,-33,50,50,50,50,50,50,-20,-21,-22,-23,-24,50,50,50,50,50,50,50,50,-35,-36,32,-15,-16,-13,-14,32,32,32,32,50,-53,-53,50,-9,-11,32,-10,-12,]),'MOD':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,51,-39,-52,51,51,51,51,51,51,51,51,51,-20,-21,51,51,-24,51,51,51,51,51,51,51,51,-35,-36,-15,-16,-13,-14,51,51,]),'GREATER_EQUAL':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,52,-39,-52,52,-32,-33,-34,-38,52,52,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,52,52,-31,52,-35,-36,-15,-16,-13,-14,-17,52,]),'LESS_EQUAL':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,53,-39,-52,53,-32,-33,-34,-38,53,53,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,53,53,-31,53,-35,-36,-15,-16,-13,-14,-17,53,]),'GREATER_THAN':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,54,-39,-52,54,-32,-33,-34,-38,54,54,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,54,54,-31,54,-35,-36,-15,-16,-13,-14,-17,54,]),'LESS_THAN':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,55,-39,-52,55,-32,-33,-34,-38,55,55,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,55,55,-31,55,-35,-36,-15,-16,-13,-14,-17,55,]),'OR':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,56,-39,-52,56,-32,-33,-34,-38,56,56,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,56,-35,-36,-15,-16,-13,-14,-17,56,]),'AND':([11,24,27,34,36,64,65,66,67,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,96,97,98,99,105,108,],[-48,-37,57,-39,-52,57,-32,-33,-34,-38,57,57,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,57,-35,-36,-15,-16,-13,-14,-17,57,]),'RSQUAREBR':([11,24,30,34,36,61,62,63,64,65,66,67,72,73,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,94,96,97,98,99,103,105,],[-48,-37,-53,-39,-52,92,93,-40,-41,-32,-33,-34,-38,98,99,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-35,-36,-53,-15,-16,-13,-14,-42,-17,]),'COLON':([11,24,34,36,65,66,67,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,96,97,98,99,105,],[-48,-37,-39,-52,-32,-33,-34,-38,100,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-35,-36,-15,-16,-13,-14,-17,]),'error':([12,30,38,43,60,],[15,62,71,74,91,]),'LBRACE':([18,19,],[21,22,]),'IF':([21,22,26,42,59,101,102,106,107,109,110,111,112,113,],[29,29,29,-7,-8,29,29,-53,-53,-9,-11,29,-10,-12,]),'NOT':([21,22,26,30,31,32,33,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,94,100,101,102,104,106,107,109,110,111,112,113,],[33,33,33,33,33,33,33,33,33,-7,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-8,33,33,33,33,33,33,-53,-53,-9,-11,33,-10,-12,]),'VAR':([21,22,26,42,59,101,102,106,107,109,110,111,112,113,],[35,35,35,-7,-8,35,35,-53,-53,-9,-11,35,-10,-12,]),'NUM':([21,22,26,30,31,32,33,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,94,100,101,102,104,106,107,109,110,111,112,113,],[36,36,36,36,36,36,36,36,36,-7,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-8,36,36,36,36,36,36,-53,-53,-9,-11,36,-10,-12,]),'RBRACE':([25,26,37,41,42,59,106,107,109,110,112,113,],[40,-5,69,-6,-7,-8,-53,-53,-9,-11,-10,-12,]),'ELSE':([42,59,106,107,109,110,112,113,],[-7,-8,111,111,-9,-11,-10,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,3,],[1,5,]),'empty':([0,3,12,20,30,38,94,106,107,],[2,2,16,16,63,63,63,110,110,]),'func':([0,3,],[3,3,]),'type':([4,12,20,35,],[6,13,13,68,]),'iden':([6,13,21,22,26,30,31,32,33,38,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,68,94,100,101,102,104,111,],[10,17,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,95,24,24,24,24,24,24,]),'flist':([12,20,],[14,23,]),'body':([21,22,26,],[25,37,41,]),'stmt':([21,22,26,101,102,111,],[26,26,26,106,107,113,]),'expr':([21,22,26,30,31,32,33,38,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,94,100,101,102,104,111,],[27,27,27,64,65,66,67,64,72,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,64,105,27,27,108,27,]),'defvar':([21,22,26,101,102,111,],[28,28,28,28,28,28,]),'num':([21,22,26,30,31,32,33,38,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,94,100,101,102,104,111,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'clist':([30,38,94,],[61,70,103,]),'else_choice':([106,107,],[109,112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> empty','prog',1,'p_prog1','grammer.py',17),
  ('prog -> func prog','prog',2,'p_prog2','grammer.py',31),
  ('func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE','func',9,'p_func','grammer.py',46),
  ('func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE','func',9,'p_func_error','grammer.py',59),
  ('body -> stmt','body',1,'p_body1','grammer.py',72),
  ('body -> stmt body','body',2,'p_body2','grammer.py',82),
  ('stmt -> expr SEMI_COLON','stmt',2,'p_stmt1','grammer.py',94),
  ('stmt -> defvar SEMI_COLON','stmt',2,'p_stmt2','grammer.py',105),
  ('stmt -> IF LPAREN expr RPAREN stmt else_choice','stmt',6,'p_stmt3','grammer.py',117),
  ('stmt -> IF LPAREN error RPAREN stmt else_choice','stmt',6,'p_stmt3_error','grammer.py',128),
  ('else_choice -> empty','else_choice',1,'p_else_choice1','grammer.py',142),
  ('else_choice -> ELSE stmt','else_choice',2,'p_else_choice2','grammer.py',152),
  ('expr -> expr LSQUAREBR expr RSQUAREBR','expr',4,'p_expr1','grammer.py',164),
  ('expr -> expr LSQUAREBR error RSQUAREBR','expr',4,'p_expr1_error','grammer.py',175),
  ('expr -> iden LPAREN clist RPAREN','expr',4,'p_expr2','grammer.py',190),
  ('expr -> iden LPAREN error RPAREN','expr',4,'p_expr2_error','grammer.py',200),
  ('expr -> expr QMARK expr COLON expr','expr',5,'p_expr3','grammer.py',215),
  ('expr -> expr PARITY expr','expr',3,'p_expr4','grammer.py',225),
  ('expr -> expr NOT_EQ expr','expr',3,'p_expr4','grammer.py',226),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr4','grammer.py',227),
  ('expr -> expr TIMES expr','expr',3,'p_expr4','grammer.py',228),
  ('expr -> expr MINUS expr','expr',3,'p_expr4','grammer.py',229),
  ('expr -> expr PLUS expr','expr',3,'p_expr4','grammer.py',230),
  ('expr -> expr MOD expr','expr',3,'p_expr4','grammer.py',231),
  ('expr -> expr GREATER_EQUAL expr','expr',3,'p_expr4','grammer.py',232),
  ('expr -> expr LESS_EQUAL expr','expr',3,'p_expr4','grammer.py',233),
  ('expr -> expr GREATER_THAN expr','expr',3,'p_expr4','grammer.py',234),
  ('expr -> expr LESS_THAN expr','expr',3,'p_expr4','grammer.py',235),
  ('expr -> expr OR expr','expr',3,'p_expr4','grammer.py',236),
  ('expr -> expr AND expr','expr',3,'p_expr4','grammer.py',237),
  ('expr -> expr EQ expr','expr',3,'p_expr4','grammer.py',238),
  ('expr -> MINUS expr','expr',2,'p_expr5','grammer.py',248),
  ('expr -> PLUS expr','expr',2,'p_expr5','grammer.py',249),
  ('expr -> NOT expr','expr',2,'p_expr5','grammer.py',250),
  ('expr -> LSQUAREBR clist RSQUAREBR','expr',3,'p_expr6','grammer.py',260),
  ('expr -> LSQUAREBR error RSQUAREBR','expr',3,'p_expr6_error','grammer.py',270),
  ('expr -> iden','expr',1,'p_expr7','grammer.py',284),
  ('expr -> iden EQ expr','expr',3,'p_expr8','grammer.py',296),
  ('expr -> num','expr',1,'p_expr9','grammer.py',307),
  ('clist -> empty','clist',1,'p_clist1','grammer.py',320),
  ('clist -> expr','clist',1,'p_clist2','grammer.py',330),
  ('clist -> expr COMMA clist','clist',3,'p_clist3','grammer.py',340),
  ('defvar -> VAR type iden','defvar',3,'p_defvar1','grammer.py',353),
  ('defvar -> VAR type iden EQ expr','defvar',5,'p_defvar2','grammer.py',366),
  ('flist -> empty','flist',1,'p_flist1','grammer.py',378),
  ('flist -> type iden','flist',2,'p_flist2','grammer.py',388),
  ('flist -> type iden COMMA flist','flist',4,'p_flist3','grammer.py',398),
  ('iden -> IDEN','iden',1,'p_iden','grammer.py',410),
  ('type -> INT','type',1,'p_type','grammer.py',422),
  ('type -> VECTOR','type',1,'p_type','grammer.py',423),
  ('type -> NULL','type',1,'p_type','grammer.py',424),
  ('num -> NUM','num',1,'p_num','grammer.py',436),
  ('empty -> <empty>','empty',0,'p_empty','grammer.py',446),
]
