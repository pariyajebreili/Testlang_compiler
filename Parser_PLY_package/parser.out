Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    STR
    WHILE

Grammar

Rule 0     S' -> prog
Rule 1     prog -> func
Rule 2     prog -> func prog
Rule 3     func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
Rule 4     func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE
Rule 5     body -> stmt
Rule 6     body -> stmt body
Rule 7     stmt -> expr SEMI_COLON
Rule 8     stmt -> defvar SEMI_COLON
Rule 9     stmt -> IF LPAREN expr RPAREN stmt else_choice
Rule 10    stmt -> IF LPAREN error RPAREN stmt else_choice
Rule 11    else_choice -> empty
Rule 12    else_choice -> ELSE stmt
Rule 13    stmt -> func
Rule 14    stmt -> FOR LPAREN expr TO expr RPAREN stmt
Rule 15    stmt -> RETURN expr SEMI_COLON
Rule 16    stmt -> LBRACE body RBRACE
Rule 17    expr -> iden LPAREN clist RPAREN
Rule 18    expr -> iden LPAREN error RPAREN
Rule 19    expr -> expr LSQUAREBR expr RSQUAREBR
Rule 20    expr -> expr LSQUAREBR error RSQUAREBR
Rule 21    expr -> expr QMARK expr COLON expr
Rule 22    expr -> expr PARITY expr
Rule 23    expr -> expr NOT_EQ expr
Rule 24    expr -> expr DIVIDE expr
Rule 25    expr -> expr TIMES expr
Rule 26    expr -> expr MINUS expr
Rule 27    expr -> expr PLUS expr
Rule 28    expr -> expr MOD expr
Rule 29    expr -> expr GREATER_EQUAL expr
Rule 30    expr -> expr LESS_EQUAL expr
Rule 31    expr -> expr GREATER_THAN expr
Rule 32    expr -> expr LESS_THAN expr
Rule 33    expr -> expr OR expr
Rule 34    expr -> expr AND expr
Rule 35    expr -> expr EQ expr
Rule 36    expr -> MINUS expr
Rule 37    expr -> PLUS expr
Rule 38    expr -> NOT expr
Rule 39    expr -> LSQUAREBR clist RSQUAREBR
Rule 40    expr -> LSQUAREBR error RSQUAREBR
Rule 41    expr -> iden
Rule 42    expr -> num
Rule 43    clist -> empty
Rule 44    clist -> expr
Rule 45    clist -> expr COMMA clist
Rule 46    defvar -> VAR type iden
Rule 47    defvar -> VAR type iden EQ expr
Rule 48    flist -> empty
Rule 49    flist -> type iden
Rule 50    flist -> type iden COMMA flist
Rule 51    iden -> IDEN
Rule 52    type -> INT
Rule 53    type -> VECTOR
Rule 54    type -> NULL
Rule 55    num -> NUM
Rule 56    empty -> <empty>

Terminals, with rules where they appear

AND                  : 34
COLON                : 21
COMMA                : 45 50
COMMENT              : 
DEF                  : 3 4
DIVIDE               : 24
ELSE                 : 12
EQ                   : 35 47
FOR                  : 14
GREATER_EQUAL        : 29
GREATER_THAN         : 31
IDEN                 : 51
IF                   : 9 10
INT                  : 52
LBRACE               : 3 4 16
LESS_EQUAL           : 30
LESS_THAN            : 32
LPAREN               : 3 4 9 10 14 17 18
LSQUAREBR            : 19 20 39 40
MINUS                : 26 36
MOD                  : 28
NOT                  : 38
NOT_EQ               : 23
NULL                 : 54
NUM                  : 55
OR                   : 33
PARITY               : 22
PLUS                 : 27 37
QMARK                : 21
RBRACE               : 3 4 16
RETURN               : 15
RPAREN               : 3 4 9 10 14 17 18
RSQUAREBR            : 19 20 39 40
SEMI_COLON           : 7 8 15
STR                  : 
TIMES                : 25
TO                   : 14
VAR                  : 46 47
VECTOR               : 53
WHILE                : 
error                : 4 10 18 20 40

Nonterminals, with rules where they appear

body                 : 3 4 6 16
clist                : 17 39 45
defvar               : 8
else_choice          : 9 10
empty                : 11 43 48
expr                 : 7 9 14 14 15 19 19 20 21 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 37 38 44 45 47
flist                : 3 50
func                 : 1 2 13
iden                 : 3 4 17 18 41 46 47 49 50
num                  : 42
prog                 : 2 0
stmt                 : 5 6 9 10 12 14
type                 : 3 4 46 47 49 50

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE

    DEF             shift and go to state 3

    prog                           shift and go to state 1
    func                           shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> func .
    (2) prog -> func . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE

    $end            reduce using rule 1 (prog -> func .)
    DEF             shift and go to state 3

    func                           shift and go to state 2
    prog                           shift and go to state 4

state 3

    (3) func -> DEF . type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> DEF . type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) type -> . INT
    (53) type -> . VECTOR
    (54) type -> . NULL

    INT             shift and go to state 6
    VECTOR          shift and go to state 7
    NULL            shift and go to state 8

    type                           shift and go to state 5

state 4

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 5

    (3) func -> DEF type . iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> DEF type . iden LPAREN error RPAREN LBRACE body RBRACE
    (51) iden -> . IDEN

    IDEN            shift and go to state 10

    iden                           shift and go to state 9

state 6

    (52) type -> INT .

    IDEN            reduce using rule 52 (type -> INT .)


state 7

    (53) type -> VECTOR .

    IDEN            reduce using rule 53 (type -> VECTOR .)


state 8

    (54) type -> NULL .

    IDEN            reduce using rule 54 (type -> NULL .)


state 9

    (3) func -> DEF type iden . LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> DEF type iden . LPAREN error RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 11


state 10

    (51) iden -> IDEN .

    LPAREN          reduce using rule 51 (iden -> IDEN .)
    COMMA           reduce using rule 51 (iden -> IDEN .)
    RPAREN          reduce using rule 51 (iden -> IDEN .)
    SEMI_COLON      reduce using rule 51 (iden -> IDEN .)
    LSQUAREBR       reduce using rule 51 (iden -> IDEN .)
    QMARK           reduce using rule 51 (iden -> IDEN .)
    PARITY          reduce using rule 51 (iden -> IDEN .)
    NOT_EQ          reduce using rule 51 (iden -> IDEN .)
    DIVIDE          reduce using rule 51 (iden -> IDEN .)
    TIMES           reduce using rule 51 (iden -> IDEN .)
    MINUS           reduce using rule 51 (iden -> IDEN .)
    PLUS            reduce using rule 51 (iden -> IDEN .)
    MOD             reduce using rule 51 (iden -> IDEN .)
    GREATER_EQUAL   reduce using rule 51 (iden -> IDEN .)
    LESS_EQUAL      reduce using rule 51 (iden -> IDEN .)
    GREATER_THAN    reduce using rule 51 (iden -> IDEN .)
    LESS_THAN       reduce using rule 51 (iden -> IDEN .)
    OR              reduce using rule 51 (iden -> IDEN .)
    AND             reduce using rule 51 (iden -> IDEN .)
    EQ              reduce using rule 51 (iden -> IDEN .)
    RSQUAREBR       reduce using rule 51 (iden -> IDEN .)
    COLON           reduce using rule 51 (iden -> IDEN .)
    TO              reduce using rule 51 (iden -> IDEN .)


state 11

    (3) func -> DEF type iden LPAREN . flist RPAREN LBRACE body RBRACE
    (4) func -> DEF type iden LPAREN . error RPAREN LBRACE body RBRACE
    (48) flist -> . empty
    (49) flist -> . type iden
    (50) flist -> . type iden COMMA flist
    (56) empty -> .
    (52) type -> . INT
    (53) type -> . VECTOR
    (54) type -> . NULL

    error           shift and go to state 14
    RPAREN          reduce using rule 56 (empty -> .)
    INT             shift and go to state 6
    VECTOR          shift and go to state 7
    NULL            shift and go to state 8

    type                           shift and go to state 12
    flist                          shift and go to state 13
    empty                          shift and go to state 15

state 12

    (49) flist -> type . iden
    (50) flist -> type . iden COMMA flist
    (51) iden -> . IDEN

    IDEN            shift and go to state 10

    iden                           shift and go to state 16

state 13

    (3) func -> DEF type iden LPAREN flist . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 17


state 14

    (4) func -> DEF type iden LPAREN error . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 18


state 15

    (48) flist -> empty .

    RPAREN          reduce using rule 48 (flist -> empty .)


state 16

    (49) flist -> type iden .
    (50) flist -> type iden . COMMA flist

    RPAREN          reduce using rule 49 (flist -> type iden .)
    COMMA           shift and go to state 19


state 17

    (3) func -> DEF type iden LPAREN flist RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 20


state 18

    (4) func -> DEF type iden LPAREN error RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 21


state 19

    (50) flist -> type iden COMMA . flist
    (48) flist -> . empty
    (49) flist -> . type iden
    (50) flist -> . type iden COMMA flist
    (56) empty -> .
    (52) type -> . INT
    (53) type -> . VECTOR
    (54) type -> . NULL

    RPAREN          reduce using rule 56 (empty -> .)
    INT             shift and go to state 6
    VECTOR          shift and go to state 7
    NULL            shift and go to state 8

    type                           shift and go to state 12
    flist                          shift and go to state 22
    empty                          shift and go to state 15

state 20

    (3) func -> DEF type iden LPAREN flist RPAREN LBRACE . body RBRACE
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (46) defvar -> . VAR type iden
    (47) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (51) iden -> . IDEN
    (55) num -> . NUM

    IF              shift and go to state 29
    FOR             shift and go to state 31
    RETURN          shift and go to state 32
    LBRACE          shift and go to state 24
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    VAR             shift and go to state 38
    DEF             shift and go to state 3
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    iden                           shift and go to state 23
    body                           shift and go to state 25
    stmt                           shift and go to state 26
    expr                           shift and go to state 27
    defvar                         shift and go to state 28
    func                           shift and go to state 30
    num                            shift and go to state 37

state 21

    (4) func -> DEF type iden LPAREN error RPAREN LBRACE . body RBRACE
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (46) defvar -> . VAR type iden
    (47) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (51) iden -> . IDEN
    (55) num -> . NUM

    IF              shift and go to state 29
    FOR             shift and go to state 31
    RETURN          shift and go to state 32
    LBRACE          shift and go to state 24
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    VAR             shift and go to state 38
    DEF             shift and go to state 3
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    iden                           shift and go to state 23
    body                           shift and go to state 40
    stmt                           shift and go to state 26
    expr                           shift and go to state 27
    defvar                         shift and go to state 28
    func                           shift and go to state 30
    num                            shift and go to state 37

state 22

    (50) flist -> type iden COMMA flist .

    RPAREN          reduce using rule 50 (flist -> type iden COMMA flist .)


state 23

    (17) expr -> iden . LPAREN clist RPAREN
    (18) expr -> iden . LPAREN error RPAREN
    (41) expr -> iden .

    LPAREN          shift and go to state 41
    SEMI_COLON      reduce using rule 41 (expr -> iden .)
    LSQUAREBR       reduce using rule 41 (expr -> iden .)
    QMARK           reduce using rule 41 (expr -> iden .)
    PARITY          reduce using rule 41 (expr -> iden .)
    NOT_EQ          reduce using rule 41 (expr -> iden .)
    DIVIDE          reduce using rule 41 (expr -> iden .)
    TIMES           reduce using rule 41 (expr -> iden .)
    MINUS           reduce using rule 41 (expr -> iden .)
    PLUS            reduce using rule 41 (expr -> iden .)
    MOD             reduce using rule 41 (expr -> iden .)
    GREATER_EQUAL   reduce using rule 41 (expr -> iden .)
    LESS_EQUAL      reduce using rule 41 (expr -> iden .)
    GREATER_THAN    reduce using rule 41 (expr -> iden .)
    LESS_THAN       reduce using rule 41 (expr -> iden .)
    OR              reduce using rule 41 (expr -> iden .)
    AND             reduce using rule 41 (expr -> iden .)
    EQ              reduce using rule 41 (expr -> iden .)
    COMMA           reduce using rule 41 (expr -> iden .)
    RSQUAREBR       reduce using rule 41 (expr -> iden .)
    RPAREN          reduce using rule 41 (expr -> iden .)
    COLON           reduce using rule 41 (expr -> iden .)
    TO              reduce using rule 41 (expr -> iden .)


state 24

    (16) stmt -> LBRACE . body RBRACE
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (46) defvar -> . VAR type iden
    (47) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (51) iden -> . IDEN
    (55) num -> . NUM

    IF              shift and go to state 29
    FOR             shift and go to state 31
    RETURN          shift and go to state 32
    LBRACE          shift and go to state 24
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    VAR             shift and go to state 38
    DEF             shift and go to state 3
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    body                           shift and go to state 42
    stmt                           shift and go to state 26
    expr                           shift and go to state 27
    defvar                         shift and go to state 28
    func                           shift and go to state 30
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 25

    (3) func -> DEF type iden LPAREN flist RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 43


state 26

    (5) body -> stmt .
    (6) body -> stmt . body
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (46) defvar -> . VAR type iden
    (47) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (51) iden -> . IDEN
    (55) num -> . NUM

    RBRACE          reduce using rule 5 (body -> stmt .)
    IF              shift and go to state 29
    FOR             shift and go to state 31
    RETURN          shift and go to state 32
    LBRACE          shift and go to state 24
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    VAR             shift and go to state 38
    DEF             shift and go to state 3
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    stmt                           shift and go to state 26
    body                           shift and go to state 44
    expr                           shift and go to state 27
    defvar                         shift and go to state 28
    func                           shift and go to state 30
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 27

    (7) stmt -> expr . SEMI_COLON
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      shift and go to state 45
    LSQUAREBR       shift and go to state 46
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60
    EQ              shift and go to state 61


state 28

    (8) stmt -> defvar . SEMI_COLON

    SEMI_COLON      shift and go to state 62


state 29

    (9) stmt -> IF . LPAREN expr RPAREN stmt else_choice
    (10) stmt -> IF . LPAREN error RPAREN stmt else_choice

    LPAREN          shift and go to state 63


state 30

    (13) stmt -> func .

    IF              reduce using rule 13 (stmt -> func .)
    FOR             reduce using rule 13 (stmt -> func .)
    RETURN          reduce using rule 13 (stmt -> func .)
    LBRACE          reduce using rule 13 (stmt -> func .)
    MINUS           reduce using rule 13 (stmt -> func .)
    PLUS            reduce using rule 13 (stmt -> func .)
    NOT             reduce using rule 13 (stmt -> func .)
    LSQUAREBR       reduce using rule 13 (stmt -> func .)
    VAR             reduce using rule 13 (stmt -> func .)
    DEF             reduce using rule 13 (stmt -> func .)
    IDEN            reduce using rule 13 (stmt -> func .)
    NUM             reduce using rule 13 (stmt -> func .)
    RBRACE          reduce using rule 13 (stmt -> func .)
    ELSE            reduce using rule 13 (stmt -> func .)


state 31

    (14) stmt -> FOR . LPAREN expr TO expr RPAREN stmt

    LPAREN          shift and go to state 64


state 32

    (15) stmt -> RETURN . expr SEMI_COLON
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 65
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 33

    (39) expr -> LSQUAREBR . clist RSQUAREBR
    (40) expr -> LSQUAREBR . error RSQUAREBR
    (43) clist -> . empty
    (44) clist -> . expr
    (45) clist -> . expr COMMA clist
    (56) empty -> .
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    error           shift and go to state 67
    RSQUAREBR       reduce using rule 56 (empty -> .)
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    clist                          shift and go to state 66
    empty                          shift and go to state 68
    expr                           shift and go to state 69
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 34

    (36) expr -> MINUS . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 70
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 35

    (37) expr -> PLUS . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 71
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 36

    (38) expr -> NOT . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 72
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 37

    (42) expr -> num .

    SEMI_COLON      reduce using rule 42 (expr -> num .)
    LSQUAREBR       reduce using rule 42 (expr -> num .)
    QMARK           reduce using rule 42 (expr -> num .)
    PARITY          reduce using rule 42 (expr -> num .)
    NOT_EQ          reduce using rule 42 (expr -> num .)
    DIVIDE          reduce using rule 42 (expr -> num .)
    TIMES           reduce using rule 42 (expr -> num .)
    MINUS           reduce using rule 42 (expr -> num .)
    PLUS            reduce using rule 42 (expr -> num .)
    MOD             reduce using rule 42 (expr -> num .)
    GREATER_EQUAL   reduce using rule 42 (expr -> num .)
    LESS_EQUAL      reduce using rule 42 (expr -> num .)
    GREATER_THAN    reduce using rule 42 (expr -> num .)
    LESS_THAN       reduce using rule 42 (expr -> num .)
    OR              reduce using rule 42 (expr -> num .)
    AND             reduce using rule 42 (expr -> num .)
    EQ              reduce using rule 42 (expr -> num .)
    COMMA           reduce using rule 42 (expr -> num .)
    RSQUAREBR       reduce using rule 42 (expr -> num .)
    RPAREN          reduce using rule 42 (expr -> num .)
    COLON           reduce using rule 42 (expr -> num .)
    TO              reduce using rule 42 (expr -> num .)


state 38

    (46) defvar -> VAR . type iden
    (47) defvar -> VAR . type iden EQ expr
    (52) type -> . INT
    (53) type -> . VECTOR
    (54) type -> . NULL

    INT             shift and go to state 6
    VECTOR          shift and go to state 7
    NULL            shift and go to state 8

    type                           shift and go to state 73

state 39

    (55) num -> NUM .

    SEMI_COLON      reduce using rule 55 (num -> NUM .)
    LSQUAREBR       reduce using rule 55 (num -> NUM .)
    QMARK           reduce using rule 55 (num -> NUM .)
    PARITY          reduce using rule 55 (num -> NUM .)
    NOT_EQ          reduce using rule 55 (num -> NUM .)
    DIVIDE          reduce using rule 55 (num -> NUM .)
    TIMES           reduce using rule 55 (num -> NUM .)
    MINUS           reduce using rule 55 (num -> NUM .)
    PLUS            reduce using rule 55 (num -> NUM .)
    MOD             reduce using rule 55 (num -> NUM .)
    GREATER_EQUAL   reduce using rule 55 (num -> NUM .)
    LESS_EQUAL      reduce using rule 55 (num -> NUM .)
    GREATER_THAN    reduce using rule 55 (num -> NUM .)
    LESS_THAN       reduce using rule 55 (num -> NUM .)
    OR              reduce using rule 55 (num -> NUM .)
    AND             reduce using rule 55 (num -> NUM .)
    EQ              reduce using rule 55 (num -> NUM .)
    COMMA           reduce using rule 55 (num -> NUM .)
    RSQUAREBR       reduce using rule 55 (num -> NUM .)
    RPAREN          reduce using rule 55 (num -> NUM .)
    COLON           reduce using rule 55 (num -> NUM .)
    TO              reduce using rule 55 (num -> NUM .)


state 40

    (4) func -> DEF type iden LPAREN error RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 74


state 41

    (17) expr -> iden LPAREN . clist RPAREN
    (18) expr -> iden LPAREN . error RPAREN
    (43) clist -> . empty
    (44) clist -> . expr
    (45) clist -> . expr COMMA clist
    (56) empty -> .
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    error           shift and go to state 76
    RPAREN          reduce using rule 56 (empty -> .)
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    iden                           shift and go to state 23
    clist                          shift and go to state 75
    empty                          shift and go to state 68
    expr                           shift and go to state 69
    num                            shift and go to state 37

state 42

    (16) stmt -> LBRACE body . RBRACE

    RBRACE          shift and go to state 77


state 43

    (3) func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .

    DEF             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    LBRACE          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    MINUS           reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    PLUS            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    NOT             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    LSQUAREBR       reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    IDEN            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    NUM             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)


state 44

    (6) body -> stmt body .

    RBRACE          reduce using rule 6 (body -> stmt body .)


state 45

    (7) stmt -> expr SEMI_COLON .

    IF              reduce using rule 7 (stmt -> expr SEMI_COLON .)
    FOR             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    RETURN          reduce using rule 7 (stmt -> expr SEMI_COLON .)
    LBRACE          reduce using rule 7 (stmt -> expr SEMI_COLON .)
    MINUS           reduce using rule 7 (stmt -> expr SEMI_COLON .)
    PLUS            reduce using rule 7 (stmt -> expr SEMI_COLON .)
    NOT             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    LSQUAREBR       reduce using rule 7 (stmt -> expr SEMI_COLON .)
    VAR             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    DEF             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    IDEN            reduce using rule 7 (stmt -> expr SEMI_COLON .)
    NUM             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    RBRACE          reduce using rule 7 (stmt -> expr SEMI_COLON .)
    ELSE            reduce using rule 7 (stmt -> expr SEMI_COLON .)


state 46

    (19) expr -> expr LSQUAREBR . expr RSQUAREBR
    (20) expr -> expr LSQUAREBR . error RSQUAREBR
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    error           shift and go to state 79
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 78
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 47

    (21) expr -> expr QMARK . expr COLON expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 80
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 48

    (22) expr -> expr PARITY . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 81
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 49

    (23) expr -> expr NOT_EQ . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 82
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 50

    (24) expr -> expr DIVIDE . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 83
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 51

    (25) expr -> expr TIMES . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 84
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 52

    (26) expr -> expr MINUS . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 85
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 53

    (27) expr -> expr PLUS . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 86
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 54

    (28) expr -> expr MOD . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 87
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 55

    (29) expr -> expr GREATER_EQUAL . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 88
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 56

    (30) expr -> expr LESS_EQUAL . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 89
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 57

    (31) expr -> expr GREATER_THAN . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 90
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 58

    (32) expr -> expr LESS_THAN . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 91
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 59

    (33) expr -> expr OR . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 92
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 60

    (34) expr -> expr AND . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 93
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 61

    (35) expr -> expr EQ . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 94
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 62

    (8) stmt -> defvar SEMI_COLON .

    IF              reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    FOR             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    RETURN          reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    LBRACE          reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    MINUS           reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    PLUS            reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    NOT             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    LSQUAREBR       reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    VAR             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    DEF             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    IDEN            reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    NUM             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    RBRACE          reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    ELSE            reduce using rule 8 (stmt -> defvar SEMI_COLON .)


state 63

    (9) stmt -> IF LPAREN . expr RPAREN stmt else_choice
    (10) stmt -> IF LPAREN . error RPAREN stmt else_choice
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    error           shift and go to state 96
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 95
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 64

    (14) stmt -> FOR LPAREN . expr TO expr RPAREN stmt
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 97
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 65

    (15) stmt -> RETURN expr . SEMI_COLON
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      shift and go to state 98
    LSQUAREBR       shift and go to state 46
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60
    EQ              shift and go to state 61


state 66

    (39) expr -> LSQUAREBR clist . RSQUAREBR

    RSQUAREBR       shift and go to state 99


state 67

    (40) expr -> LSQUAREBR error . RSQUAREBR

    RSQUAREBR       shift and go to state 100


state 68

    (43) clist -> empty .

    RSQUAREBR       reduce using rule 43 (clist -> empty .)
    RPAREN          reduce using rule 43 (clist -> empty .)


state 69

    (44) clist -> expr .
    (45) clist -> expr . COMMA clist
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    RSQUAREBR       reduce using rule 44 (clist -> expr .)
    RPAREN          reduce using rule 44 (clist -> expr .)
    COMMA           shift and go to state 101
    LSQUAREBR       shift and go to state 46
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60
    EQ              shift and go to state 61


state 70

    (36) expr -> MINUS expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 36 (expr -> MINUS expr .)
    LSQUAREBR       reduce using rule 36 (expr -> MINUS expr .)
    QMARK           reduce using rule 36 (expr -> MINUS expr .)
    PARITY          reduce using rule 36 (expr -> MINUS expr .)
    NOT_EQ          reduce using rule 36 (expr -> MINUS expr .)
    MINUS           reduce using rule 36 (expr -> MINUS expr .)
    PLUS            reduce using rule 36 (expr -> MINUS expr .)
    GREATER_EQUAL   reduce using rule 36 (expr -> MINUS expr .)
    LESS_EQUAL      reduce using rule 36 (expr -> MINUS expr .)
    GREATER_THAN    reduce using rule 36 (expr -> MINUS expr .)
    LESS_THAN       reduce using rule 36 (expr -> MINUS expr .)
    OR              reduce using rule 36 (expr -> MINUS expr .)
    AND             reduce using rule 36 (expr -> MINUS expr .)
    EQ              reduce using rule 36 (expr -> MINUS expr .)
    COMMA           reduce using rule 36 (expr -> MINUS expr .)
    RSQUAREBR       reduce using rule 36 (expr -> MINUS expr .)
    RPAREN          reduce using rule 36 (expr -> MINUS expr .)
    COLON           reduce using rule 36 (expr -> MINUS expr .)
    TO              reduce using rule 36 (expr -> MINUS expr .)
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MOD             shift and go to state 54

  ! DIVIDE          [ reduce using rule 36 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> MINUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! QMARK           [ shift and go to state 47 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 52 ]
  ! PLUS            [ shift and go to state 53 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]


state 71

    (37) expr -> PLUS expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 37 (expr -> PLUS expr .)
    LSQUAREBR       reduce using rule 37 (expr -> PLUS expr .)
    QMARK           reduce using rule 37 (expr -> PLUS expr .)
    PARITY          reduce using rule 37 (expr -> PLUS expr .)
    NOT_EQ          reduce using rule 37 (expr -> PLUS expr .)
    MINUS           reduce using rule 37 (expr -> PLUS expr .)
    PLUS            reduce using rule 37 (expr -> PLUS expr .)
    GREATER_EQUAL   reduce using rule 37 (expr -> PLUS expr .)
    LESS_EQUAL      reduce using rule 37 (expr -> PLUS expr .)
    GREATER_THAN    reduce using rule 37 (expr -> PLUS expr .)
    LESS_THAN       reduce using rule 37 (expr -> PLUS expr .)
    OR              reduce using rule 37 (expr -> PLUS expr .)
    AND             reduce using rule 37 (expr -> PLUS expr .)
    EQ              reduce using rule 37 (expr -> PLUS expr .)
    COMMA           reduce using rule 37 (expr -> PLUS expr .)
    RSQUAREBR       reduce using rule 37 (expr -> PLUS expr .)
    RPAREN          reduce using rule 37 (expr -> PLUS expr .)
    COLON           reduce using rule 37 (expr -> PLUS expr .)
    TO              reduce using rule 37 (expr -> PLUS expr .)
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MOD             shift and go to state 54

  ! DIVIDE          [ reduce using rule 37 (expr -> PLUS expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> PLUS expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> PLUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! QMARK           [ shift and go to state 47 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 52 ]
  ! PLUS            [ shift and go to state 53 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]


state 72

    (38) expr -> NOT expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 38 (expr -> NOT expr .)
    LSQUAREBR       reduce using rule 38 (expr -> NOT expr .)
    PARITY          reduce using rule 38 (expr -> NOT expr .)
    NOT_EQ          reduce using rule 38 (expr -> NOT expr .)
    GREATER_EQUAL   reduce using rule 38 (expr -> NOT expr .)
    LESS_EQUAL      reduce using rule 38 (expr -> NOT expr .)
    GREATER_THAN    reduce using rule 38 (expr -> NOT expr .)
    LESS_THAN       reduce using rule 38 (expr -> NOT expr .)
    OR              reduce using rule 38 (expr -> NOT expr .)
    AND             reduce using rule 38 (expr -> NOT expr .)
    COMMA           reduce using rule 38 (expr -> NOT expr .)
    RSQUAREBR       reduce using rule 38 (expr -> NOT expr .)
    RPAREN          reduce using rule 38 (expr -> NOT expr .)
    COLON           reduce using rule 38 (expr -> NOT expr .)
    TO              reduce using rule 38 (expr -> NOT expr .)
    QMARK           shift and go to state 47
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    EQ              shift and go to state 61

  ! QMARK           [ reduce using rule 38 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 38 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> NOT expr .) ]
  ! EQ              [ reduce using rule 38 (expr -> NOT expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 73

    (46) defvar -> VAR type . iden
    (47) defvar -> VAR type . iden EQ expr
    (51) iden -> . IDEN

    IDEN            shift and go to state 10

    iden                           shift and go to state 102

state 74

    (4) func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .

    DEF             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    LBRACE          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    MINUS           reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    PLUS            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    NOT             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    LSQUAREBR       reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    IDEN            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    NUM             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)


state 75

    (17) expr -> iden LPAREN clist . RPAREN

    RPAREN          shift and go to state 103


state 76

    (18) expr -> iden LPAREN error . RPAREN

    RPAREN          shift and go to state 104


state 77

    (16) stmt -> LBRACE body RBRACE .

    IF              reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    FOR             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    RETURN          reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    MINUS           reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    PLUS            reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    NOT             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    LSQUAREBR       reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    VAR             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    DEF             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    IDEN            reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    NUM             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    ELSE            reduce using rule 16 (stmt -> LBRACE body RBRACE .)


state 78

    (19) expr -> expr LSQUAREBR expr . RSQUAREBR
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    RSQUAREBR       shift and go to state 105
    LSQUAREBR       shift and go to state 46
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60
    EQ              shift and go to state 61


state 79

    (20) expr -> expr LSQUAREBR error . RSQUAREBR

    RSQUAREBR       shift and go to state 106


state 80

    (21) expr -> expr QMARK expr . COLON expr
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    COLON           shift and go to state 107
    LSQUAREBR       shift and go to state 46
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60
    EQ              shift and go to state 61


state 81

    (22) expr -> expr PARITY expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 22 (expr -> expr PARITY expr .)
    LSQUAREBR       reduce using rule 22 (expr -> expr PARITY expr .)
    PARITY          reduce using rule 22 (expr -> expr PARITY expr .)
    NOT_EQ          reduce using rule 22 (expr -> expr PARITY expr .)
    GREATER_EQUAL   reduce using rule 22 (expr -> expr PARITY expr .)
    LESS_EQUAL      reduce using rule 22 (expr -> expr PARITY expr .)
    GREATER_THAN    reduce using rule 22 (expr -> expr PARITY expr .)
    LESS_THAN       reduce using rule 22 (expr -> expr PARITY expr .)
    OR              reduce using rule 22 (expr -> expr PARITY expr .)
    AND             reduce using rule 22 (expr -> expr PARITY expr .)
    COMMA           reduce using rule 22 (expr -> expr PARITY expr .)
    RSQUAREBR       reduce using rule 22 (expr -> expr PARITY expr .)
    RPAREN          reduce using rule 22 (expr -> expr PARITY expr .)
    COLON           reduce using rule 22 (expr -> expr PARITY expr .)
    TO              reduce using rule 22 (expr -> expr PARITY expr .)
    QMARK           shift and go to state 47
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    EQ              shift and go to state 61

  ! QMARK           [ reduce using rule 22 (expr -> expr PARITY expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr PARITY expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr PARITY expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr PARITY expr .) ]
  ! PLUS            [ reduce using rule 22 (expr -> expr PARITY expr .) ]
  ! MOD             [ reduce using rule 22 (expr -> expr PARITY expr .) ]
  ! EQ              [ reduce using rule 22 (expr -> expr PARITY expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 82

    (23) expr -> expr NOT_EQ expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 23 (expr -> expr NOT_EQ expr .)
    LSQUAREBR       reduce using rule 23 (expr -> expr NOT_EQ expr .)
    PARITY          reduce using rule 23 (expr -> expr NOT_EQ expr .)
    NOT_EQ          reduce using rule 23 (expr -> expr NOT_EQ expr .)
    GREATER_EQUAL   reduce using rule 23 (expr -> expr NOT_EQ expr .)
    LESS_EQUAL      reduce using rule 23 (expr -> expr NOT_EQ expr .)
    GREATER_THAN    reduce using rule 23 (expr -> expr NOT_EQ expr .)
    LESS_THAN       reduce using rule 23 (expr -> expr NOT_EQ expr .)
    OR              reduce using rule 23 (expr -> expr NOT_EQ expr .)
    AND             reduce using rule 23 (expr -> expr NOT_EQ expr .)
    COMMA           reduce using rule 23 (expr -> expr NOT_EQ expr .)
    RSQUAREBR       reduce using rule 23 (expr -> expr NOT_EQ expr .)
    RPAREN          reduce using rule 23 (expr -> expr NOT_EQ expr .)
    COLON           reduce using rule 23 (expr -> expr NOT_EQ expr .)
    TO              reduce using rule 23 (expr -> expr NOT_EQ expr .)
    QMARK           shift and go to state 47
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    EQ              shift and go to state 61

  ! QMARK           [ reduce using rule 23 (expr -> expr NOT_EQ expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> expr NOT_EQ expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> expr NOT_EQ expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr NOT_EQ expr .) ]
  ! PLUS            [ reduce using rule 23 (expr -> expr NOT_EQ expr .) ]
  ! MOD             [ reduce using rule 23 (expr -> expr NOT_EQ expr .) ]
  ! EQ              [ reduce using rule 23 (expr -> expr NOT_EQ expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 83

    (24) expr -> expr DIVIDE expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 24 (expr -> expr DIVIDE expr .)
    LSQUAREBR       reduce using rule 24 (expr -> expr DIVIDE expr .)
    QMARK           reduce using rule 24 (expr -> expr DIVIDE expr .)
    PARITY          reduce using rule 24 (expr -> expr DIVIDE expr .)
    NOT_EQ          reduce using rule 24 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 24 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 24 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 24 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 24 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 24 (expr -> expr DIVIDE expr .)
    GREATER_EQUAL   reduce using rule 24 (expr -> expr DIVIDE expr .)
    LESS_EQUAL      reduce using rule 24 (expr -> expr DIVIDE expr .)
    GREATER_THAN    reduce using rule 24 (expr -> expr DIVIDE expr .)
    LESS_THAN       reduce using rule 24 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 24 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 24 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 24 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 24 (expr -> expr DIVIDE expr .)
    RSQUAREBR       reduce using rule 24 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 24 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 24 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 24 (expr -> expr DIVIDE expr .)

  ! LSQUAREBR       [ shift and go to state 46 ]
  ! QMARK           [ shift and go to state 47 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! TIMES           [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 52 ]
  ! PLUS            [ shift and go to state 53 ]
  ! MOD             [ shift and go to state 54 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]


state 84

    (25) expr -> expr TIMES expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 25 (expr -> expr TIMES expr .)
    LSQUAREBR       reduce using rule 25 (expr -> expr TIMES expr .)
    QMARK           reduce using rule 25 (expr -> expr TIMES expr .)
    PARITY          reduce using rule 25 (expr -> expr TIMES expr .)
    NOT_EQ          reduce using rule 25 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 25 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 25 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 25 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 25 (expr -> expr TIMES expr .)
    MOD             reduce using rule 25 (expr -> expr TIMES expr .)
    GREATER_EQUAL   reduce using rule 25 (expr -> expr TIMES expr .)
    LESS_EQUAL      reduce using rule 25 (expr -> expr TIMES expr .)
    GREATER_THAN    reduce using rule 25 (expr -> expr TIMES expr .)
    LESS_THAN       reduce using rule 25 (expr -> expr TIMES expr .)
    OR              reduce using rule 25 (expr -> expr TIMES expr .)
    AND             reduce using rule 25 (expr -> expr TIMES expr .)
    EQ              reduce using rule 25 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 25 (expr -> expr TIMES expr .)
    RSQUAREBR       reduce using rule 25 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 25 (expr -> expr TIMES expr .)
    COLON           reduce using rule 25 (expr -> expr TIMES expr .)
    TO              reduce using rule 25 (expr -> expr TIMES expr .)

  ! LSQUAREBR       [ shift and go to state 46 ]
  ! QMARK           [ shift and go to state 47 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! TIMES           [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 52 ]
  ! PLUS            [ shift and go to state 53 ]
  ! MOD             [ shift and go to state 54 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]


state 85

    (26) expr -> expr MINUS expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 26 (expr -> expr MINUS expr .)
    LSQUAREBR       reduce using rule 26 (expr -> expr MINUS expr .)
    QMARK           reduce using rule 26 (expr -> expr MINUS expr .)
    PARITY          reduce using rule 26 (expr -> expr MINUS expr .)
    NOT_EQ          reduce using rule 26 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 26 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 26 (expr -> expr MINUS expr .)
    GREATER_EQUAL   reduce using rule 26 (expr -> expr MINUS expr .)
    LESS_EQUAL      reduce using rule 26 (expr -> expr MINUS expr .)
    GREATER_THAN    reduce using rule 26 (expr -> expr MINUS expr .)
    LESS_THAN       reduce using rule 26 (expr -> expr MINUS expr .)
    OR              reduce using rule 26 (expr -> expr MINUS expr .)
    AND             reduce using rule 26 (expr -> expr MINUS expr .)
    EQ              reduce using rule 26 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 26 (expr -> expr MINUS expr .)
    RSQUAREBR       reduce using rule 26 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 26 (expr -> expr MINUS expr .)
    COLON           reduce using rule 26 (expr -> expr MINUS expr .)
    TO              reduce using rule 26 (expr -> expr MINUS expr .)
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MOD             shift and go to state 54

  ! DIVIDE          [ reduce using rule 26 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 26 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr MINUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! QMARK           [ shift and go to state 47 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 52 ]
  ! PLUS            [ shift and go to state 53 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]


state 86

    (27) expr -> expr PLUS expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 27 (expr -> expr PLUS expr .)
    LSQUAREBR       reduce using rule 27 (expr -> expr PLUS expr .)
    QMARK           reduce using rule 27 (expr -> expr PLUS expr .)
    PARITY          reduce using rule 27 (expr -> expr PLUS expr .)
    NOT_EQ          reduce using rule 27 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 27 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 27 (expr -> expr PLUS expr .)
    GREATER_EQUAL   reduce using rule 27 (expr -> expr PLUS expr .)
    LESS_EQUAL      reduce using rule 27 (expr -> expr PLUS expr .)
    GREATER_THAN    reduce using rule 27 (expr -> expr PLUS expr .)
    LESS_THAN       reduce using rule 27 (expr -> expr PLUS expr .)
    OR              reduce using rule 27 (expr -> expr PLUS expr .)
    AND             reduce using rule 27 (expr -> expr PLUS expr .)
    EQ              reduce using rule 27 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 27 (expr -> expr PLUS expr .)
    RSQUAREBR       reduce using rule 27 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 27 (expr -> expr PLUS expr .)
    COLON           reduce using rule 27 (expr -> expr PLUS expr .)
    TO              reduce using rule 27 (expr -> expr PLUS expr .)
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MOD             shift and go to state 54

  ! DIVIDE          [ reduce using rule 27 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 27 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 27 (expr -> expr PLUS expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! QMARK           [ shift and go to state 47 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 52 ]
  ! PLUS            [ shift and go to state 53 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]


state 87

    (28) expr -> expr MOD expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 28 (expr -> expr MOD expr .)
    LSQUAREBR       reduce using rule 28 (expr -> expr MOD expr .)
    QMARK           reduce using rule 28 (expr -> expr MOD expr .)
    PARITY          reduce using rule 28 (expr -> expr MOD expr .)
    NOT_EQ          reduce using rule 28 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 28 (expr -> expr MOD expr .)
    TIMES           reduce using rule 28 (expr -> expr MOD expr .)
    MINUS           reduce using rule 28 (expr -> expr MOD expr .)
    PLUS            reduce using rule 28 (expr -> expr MOD expr .)
    MOD             reduce using rule 28 (expr -> expr MOD expr .)
    GREATER_EQUAL   reduce using rule 28 (expr -> expr MOD expr .)
    LESS_EQUAL      reduce using rule 28 (expr -> expr MOD expr .)
    GREATER_THAN    reduce using rule 28 (expr -> expr MOD expr .)
    LESS_THAN       reduce using rule 28 (expr -> expr MOD expr .)
    OR              reduce using rule 28 (expr -> expr MOD expr .)
    AND             reduce using rule 28 (expr -> expr MOD expr .)
    EQ              reduce using rule 28 (expr -> expr MOD expr .)
    COMMA           reduce using rule 28 (expr -> expr MOD expr .)
    RSQUAREBR       reduce using rule 28 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 28 (expr -> expr MOD expr .)
    COLON           reduce using rule 28 (expr -> expr MOD expr .)
    TO              reduce using rule 28 (expr -> expr MOD expr .)

  ! LSQUAREBR       [ shift and go to state 46 ]
  ! QMARK           [ shift and go to state 47 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! DIVIDE          [ shift and go to state 50 ]
  ! TIMES           [ shift and go to state 51 ]
  ! MINUS           [ shift and go to state 52 ]
  ! PLUS            [ shift and go to state 53 ]
  ! MOD             [ shift and go to state 54 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]


state 88

    (29) expr -> expr GREATER_EQUAL expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    LSQUAREBR       reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    PARITY          reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    NOT_EQ          reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    LESS_EQUAL      reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    GREATER_THAN    reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    LESS_THAN       reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    OR              reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    AND             reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    COMMA           reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    RSQUAREBR       reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    RPAREN          reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    COLON           reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    TO              reduce using rule 29 (expr -> expr GREATER_EQUAL expr .)
    QMARK           shift and go to state 47
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    EQ              shift and go to state 61

  ! QMARK           [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! EQ              [ reduce using rule 29 (expr -> expr GREATER_EQUAL expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 89

    (30) expr -> expr LESS_EQUAL expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    LSQUAREBR       reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    PARITY          reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    NOT_EQ          reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    GREATER_EQUAL   reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    LESS_EQUAL      reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    GREATER_THAN    reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    LESS_THAN       reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    OR              reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    AND             reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    COMMA           reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    RSQUAREBR       reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    RPAREN          reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    COLON           reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    TO              reduce using rule 30 (expr -> expr LESS_EQUAL expr .)
    QMARK           shift and go to state 47
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    EQ              shift and go to state 61

  ! QMARK           [ reduce using rule 30 (expr -> expr LESS_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr LESS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 30 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr LESS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 30 (expr -> expr LESS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 30 (expr -> expr LESS_EQUAL expr .) ]
  ! EQ              [ reduce using rule 30 (expr -> expr LESS_EQUAL expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 90

    (31) expr -> expr GREATER_THAN expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    LSQUAREBR       reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    PARITY          reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    NOT_EQ          reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    GREATER_EQUAL   reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    LESS_EQUAL      reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    GREATER_THAN    reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    LESS_THAN       reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    OR              reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    AND             reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    RSQUAREBR       reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    RPAREN          reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    COLON           reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    TO              reduce using rule 31 (expr -> expr GREATER_THAN expr .)
    QMARK           shift and go to state 47
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    EQ              shift and go to state 61

  ! QMARK           [ reduce using rule 31 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 31 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr GREATER_THAN expr .) ]
  ! PLUS            [ reduce using rule 31 (expr -> expr GREATER_THAN expr .) ]
  ! MOD             [ reduce using rule 31 (expr -> expr GREATER_THAN expr .) ]
  ! EQ              [ reduce using rule 31 (expr -> expr GREATER_THAN expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 91

    (32) expr -> expr LESS_THAN expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 32 (expr -> expr LESS_THAN expr .)
    LSQUAREBR       reduce using rule 32 (expr -> expr LESS_THAN expr .)
    PARITY          reduce using rule 32 (expr -> expr LESS_THAN expr .)
    NOT_EQ          reduce using rule 32 (expr -> expr LESS_THAN expr .)
    GREATER_EQUAL   reduce using rule 32 (expr -> expr LESS_THAN expr .)
    LESS_EQUAL      reduce using rule 32 (expr -> expr LESS_THAN expr .)
    GREATER_THAN    reduce using rule 32 (expr -> expr LESS_THAN expr .)
    LESS_THAN       reduce using rule 32 (expr -> expr LESS_THAN expr .)
    OR              reduce using rule 32 (expr -> expr LESS_THAN expr .)
    AND             reduce using rule 32 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 32 (expr -> expr LESS_THAN expr .)
    RSQUAREBR       reduce using rule 32 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 32 (expr -> expr LESS_THAN expr .)
    COLON           reduce using rule 32 (expr -> expr LESS_THAN expr .)
    TO              reduce using rule 32 (expr -> expr LESS_THAN expr .)
    QMARK           shift and go to state 47
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    EQ              shift and go to state 61

  ! QMARK           [ reduce using rule 32 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr LESS_THAN expr .) ]
  ! PLUS            [ reduce using rule 32 (expr -> expr LESS_THAN expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr LESS_THAN expr .) ]
  ! EQ              [ reduce using rule 32 (expr -> expr LESS_THAN expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 92

    (33) expr -> expr OR expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 33 (expr -> expr OR expr .)
    LSQUAREBR       reduce using rule 33 (expr -> expr OR expr .)
    OR              reduce using rule 33 (expr -> expr OR expr .)
    AND             reduce using rule 33 (expr -> expr OR expr .)
    COMMA           reduce using rule 33 (expr -> expr OR expr .)
    RSQUAREBR       reduce using rule 33 (expr -> expr OR expr .)
    RPAREN          reduce using rule 33 (expr -> expr OR expr .)
    COLON           reduce using rule 33 (expr -> expr OR expr .)
    TO              reduce using rule 33 (expr -> expr OR expr .)
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQ              shift and go to state 61

  ! QMARK           [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! PARITY          [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! NOT_EQ          [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 33 (expr -> expr OR expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 93

    (34) expr -> expr AND expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 34 (expr -> expr AND expr .)
    LSQUAREBR       reduce using rule 34 (expr -> expr AND expr .)
    OR              reduce using rule 34 (expr -> expr AND expr .)
    AND             reduce using rule 34 (expr -> expr AND expr .)
    COMMA           reduce using rule 34 (expr -> expr AND expr .)
    RSQUAREBR       reduce using rule 34 (expr -> expr AND expr .)
    RPAREN          reduce using rule 34 (expr -> expr AND expr .)
    COLON           reduce using rule 34 (expr -> expr AND expr .)
    TO              reduce using rule 34 (expr -> expr AND expr .)
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    EQ              shift and go to state 61

  ! QMARK           [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! PARITY          [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! NOT_EQ          [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 34 (expr -> expr AND expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]


state 94

    (35) expr -> expr EQ expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 35 (expr -> expr EQ expr .)
    LSQUAREBR       reduce using rule 35 (expr -> expr EQ expr .)
    QMARK           reduce using rule 35 (expr -> expr EQ expr .)
    PARITY          reduce using rule 35 (expr -> expr EQ expr .)
    NOT_EQ          reduce using rule 35 (expr -> expr EQ expr .)
    GREATER_EQUAL   reduce using rule 35 (expr -> expr EQ expr .)
    LESS_EQUAL      reduce using rule 35 (expr -> expr EQ expr .)
    GREATER_THAN    reduce using rule 35 (expr -> expr EQ expr .)
    LESS_THAN       reduce using rule 35 (expr -> expr EQ expr .)
    OR              reduce using rule 35 (expr -> expr EQ expr .)
    AND             reduce using rule 35 (expr -> expr EQ expr .)
    EQ              reduce using rule 35 (expr -> expr EQ expr .)
    COMMA           reduce using rule 35 (expr -> expr EQ expr .)
    RSQUAREBR       reduce using rule 35 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 35 (expr -> expr EQ expr .)
    COLON           reduce using rule 35 (expr -> expr EQ expr .)
    TO              reduce using rule 35 (expr -> expr EQ expr .)
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54

  ! DIVIDE          [ reduce using rule 35 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 35 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> expr EQ expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! QMARK           [ shift and go to state 47 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]


state 95

    (9) stmt -> IF LPAREN expr . RPAREN stmt else_choice
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    RPAREN          shift and go to state 108
    LSQUAREBR       shift and go to state 46
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60
    EQ              shift and go to state 61


state 96

    (10) stmt -> IF LPAREN error . RPAREN stmt else_choice

    RPAREN          shift and go to state 109


state 97

    (14) stmt -> FOR LPAREN expr . TO expr RPAREN stmt
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    TO              shift and go to state 110
    LSQUAREBR       shift and go to state 46
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60
    EQ              shift and go to state 61


state 98

    (15) stmt -> RETURN expr SEMI_COLON .

    IF              reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    FOR             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    RETURN          reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    LBRACE          reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    MINUS           reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    PLUS            reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    NOT             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    LSQUAREBR       reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    VAR             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    DEF             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    IDEN            reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    NUM             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    RBRACE          reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    ELSE            reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)


state 99

    (39) expr -> LSQUAREBR clist RSQUAREBR .

    SEMI_COLON      reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    LSQUAREBR       reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    QMARK           reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    PARITY          reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    NOT_EQ          reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    DIVIDE          reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    TIMES           reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    MINUS           reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    PLUS            reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    MOD             reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    GREATER_EQUAL   reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    LESS_EQUAL      reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    GREATER_THAN    reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    LESS_THAN       reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    OR              reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    AND             reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    EQ              reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    COMMA           reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    RSQUAREBR       reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    RPAREN          reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    COLON           reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)
    TO              reduce using rule 39 (expr -> LSQUAREBR clist RSQUAREBR .)


state 100

    (40) expr -> LSQUAREBR error RSQUAREBR .

    SEMI_COLON      reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    LSQUAREBR       reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    QMARK           reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    PARITY          reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    NOT_EQ          reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    DIVIDE          reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    TIMES           reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    MINUS           reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    PLUS            reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    MOD             reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    GREATER_EQUAL   reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    LESS_EQUAL      reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    GREATER_THAN    reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    LESS_THAN       reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    OR              reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    AND             reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    EQ              reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    COMMA           reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    RSQUAREBR       reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    RPAREN          reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    COLON           reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)
    TO              reduce using rule 40 (expr -> LSQUAREBR error RSQUAREBR .)


state 101

    (45) clist -> expr COMMA . clist
    (43) clist -> . empty
    (44) clist -> . expr
    (45) clist -> . expr COMMA clist
    (56) empty -> .
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    RSQUAREBR       reduce using rule 56 (empty -> .)
    RPAREN          reduce using rule 56 (empty -> .)
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 69
    clist                          shift and go to state 111
    empty                          shift and go to state 68
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 102

    (46) defvar -> VAR type iden .
    (47) defvar -> VAR type iden . EQ expr

    SEMI_COLON      reduce using rule 46 (defvar -> VAR type iden .)
    EQ              shift and go to state 112


state 103

    (17) expr -> iden LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    QMARK           reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    PARITY          reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    NOT_EQ          reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    TIMES           reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    MINUS           reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    PLUS            reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    MOD             reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    GREATER_EQUAL   reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    LESS_EQUAL      reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    OR              reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    AND             reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    EQ              reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    COMMA           reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    RPAREN          reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    COLON           reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)
    TO              reduce using rule 17 (expr -> iden LPAREN clist RPAREN .)


state 104

    (18) expr -> iden LPAREN error RPAREN .

    SEMI_COLON      reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    LSQUAREBR       reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    QMARK           reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    PARITY          reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    NOT_EQ          reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    DIVIDE          reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    TIMES           reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    MINUS           reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    PLUS            reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    MOD             reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    GREATER_EQUAL   reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    LESS_EQUAL      reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    GREATER_THAN    reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    LESS_THAN       reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    OR              reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    AND             reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    EQ              reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    COMMA           reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    RSQUAREBR       reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    RPAREN          reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    COLON           reduce using rule 18 (expr -> iden LPAREN error RPAREN .)
    TO              reduce using rule 18 (expr -> iden LPAREN error RPAREN .)


state 105

    (19) expr -> expr LSQUAREBR expr RSQUAREBR .

    SEMI_COLON      reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LSQUAREBR       reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    QMARK           reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    PARITY          reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    NOT_EQ          reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    DIVIDE          reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TIMES           reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MINUS           reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    PLUS            reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MOD             reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_EQUAL   reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_EQUAL      reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_THAN    reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_THAN       reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    OR              reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    AND             reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    EQ              reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COMMA           reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RSQUAREBR       reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RPAREN          reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COLON           reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TO              reduce using rule 19 (expr -> expr LSQUAREBR expr RSQUAREBR .)


state 106

    (20) expr -> expr LSQUAREBR error RSQUAREBR .

    SEMI_COLON      reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    LSQUAREBR       reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    QMARK           reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    PARITY          reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    NOT_EQ          reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    DIVIDE          reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    TIMES           reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    MINUS           reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    PLUS            reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    MOD             reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    GREATER_EQUAL   reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    LESS_EQUAL      reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    GREATER_THAN    reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    LESS_THAN       reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    OR              reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    AND             reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    EQ              reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    COMMA           reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    RSQUAREBR       reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    RPAREN          reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    COLON           reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)
    TO              reduce using rule 20 (expr -> expr LSQUAREBR error RSQUAREBR .)


state 107

    (21) expr -> expr QMARK expr COLON . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 113
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 108

    (9) stmt -> IF LPAREN expr RPAREN . stmt else_choice
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (46) defvar -> . VAR type iden
    (47) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (51) iden -> . IDEN
    (55) num -> . NUM

    IF              shift and go to state 29
    FOR             shift and go to state 31
    RETURN          shift and go to state 32
    LBRACE          shift and go to state 24
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    VAR             shift and go to state 38
    DEF             shift and go to state 3
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 27
    stmt                           shift and go to state 114
    defvar                         shift and go to state 28
    func                           shift and go to state 30
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 109

    (10) stmt -> IF LPAREN error RPAREN . stmt else_choice
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (46) defvar -> . VAR type iden
    (47) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (51) iden -> . IDEN
    (55) num -> . NUM

    IF              shift and go to state 29
    FOR             shift and go to state 31
    RETURN          shift and go to state 32
    LBRACE          shift and go to state 24
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    VAR             shift and go to state 38
    DEF             shift and go to state 3
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    stmt                           shift and go to state 115
    expr                           shift and go to state 27
    defvar                         shift and go to state 28
    func                           shift and go to state 30
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 110

    (14) stmt -> FOR LPAREN expr TO . expr RPAREN stmt
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 116
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 111

    (45) clist -> expr COMMA clist .

    RSQUAREBR       reduce using rule 45 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 45 (clist -> expr COMMA clist .)


state 112

    (47) defvar -> VAR type iden EQ . expr
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (51) iden -> . IDEN
    (55) num -> . NUM

    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    iden                           shift and go to state 23
    expr                           shift and go to state 117
    num                            shift and go to state 37

state 113

    (21) expr -> expr QMARK expr COLON expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    LSQUAREBR       reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    QMARK           reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    PARITY          reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    NOT_EQ          reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    GREATER_EQUAL   reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    LESS_EQUAL      reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    GREATER_THAN    reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    LESS_THAN       reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    OR              reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    AND             reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    EQ              reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    COMMA           reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    RSQUAREBR       reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    RPAREN          reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    COLON           reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    TO              reduce using rule 21 (expr -> expr QMARK expr COLON expr .)
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54

  ! DIVIDE          [ reduce using rule 21 (expr -> expr QMARK expr COLON expr .) ]
  ! TIMES           [ reduce using rule 21 (expr -> expr QMARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr QMARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 21 (expr -> expr QMARK expr COLON expr .) ]
  ! MOD             [ reduce using rule 21 (expr -> expr QMARK expr COLON expr .) ]
  ! LSQUAREBR       [ shift and go to state 46 ]
  ! QMARK           [ shift and go to state 47 ]
  ! PARITY          [ shift and go to state 48 ]
  ! NOT_EQ          [ shift and go to state 49 ]
  ! GREATER_EQUAL   [ shift and go to state 55 ]
  ! LESS_EQUAL      [ shift and go to state 56 ]
  ! GREATER_THAN    [ shift and go to state 57 ]
  ! LESS_THAN       [ shift and go to state 58 ]
  ! OR              [ shift and go to state 59 ]
  ! AND             [ shift and go to state 60 ]
  ! EQ              [ shift and go to state 61 ]


state 114

    (9) stmt -> IF LPAREN expr RPAREN stmt . else_choice
    (11) else_choice -> . empty
    (12) else_choice -> . ELSE stmt
    (56) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 120
    IF              reduce using rule 56 (empty -> .)
    FOR             reduce using rule 56 (empty -> .)
    RETURN          reduce using rule 56 (empty -> .)
    LBRACE          reduce using rule 56 (empty -> .)
    MINUS           reduce using rule 56 (empty -> .)
    PLUS            reduce using rule 56 (empty -> .)
    NOT             reduce using rule 56 (empty -> .)
    LSQUAREBR       reduce using rule 56 (empty -> .)
    VAR             reduce using rule 56 (empty -> .)
    DEF             reduce using rule 56 (empty -> .)
    IDEN            reduce using rule 56 (empty -> .)
    NUM             reduce using rule 56 (empty -> .)
    RBRACE          reduce using rule 56 (empty -> .)

  ! ELSE            [ reduce using rule 56 (empty -> .) ]

    else_choice                    shift and go to state 118
    empty                          shift and go to state 119

state 115

    (10) stmt -> IF LPAREN error RPAREN stmt . else_choice
    (11) else_choice -> . empty
    (12) else_choice -> . ELSE stmt
    (56) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 120
    IF              reduce using rule 56 (empty -> .)
    FOR             reduce using rule 56 (empty -> .)
    RETURN          reduce using rule 56 (empty -> .)
    LBRACE          reduce using rule 56 (empty -> .)
    MINUS           reduce using rule 56 (empty -> .)
    PLUS            reduce using rule 56 (empty -> .)
    NOT             reduce using rule 56 (empty -> .)
    LSQUAREBR       reduce using rule 56 (empty -> .)
    VAR             reduce using rule 56 (empty -> .)
    DEF             reduce using rule 56 (empty -> .)
    IDEN            reduce using rule 56 (empty -> .)
    NUM             reduce using rule 56 (empty -> .)
    RBRACE          reduce using rule 56 (empty -> .)

  ! ELSE            [ reduce using rule 56 (empty -> .) ]

    else_choice                    shift and go to state 121
    empty                          shift and go to state 119

state 116

    (14) stmt -> FOR LPAREN expr TO expr . RPAREN stmt
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    RPAREN          shift and go to state 122
    LSQUAREBR       shift and go to state 46
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60
    EQ              shift and go to state 61


state 117

    (47) defvar -> VAR type iden EQ expr .
    (19) expr -> expr . LSQUAREBR expr RSQUAREBR
    (20) expr -> expr . LSQUAREBR error RSQUAREBR
    (21) expr -> expr . QMARK expr COLON expr
    (22) expr -> expr . PARITY expr
    (23) expr -> expr . NOT_EQ expr
    (24) expr -> expr . DIVIDE expr
    (25) expr -> expr . TIMES expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . PLUS expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . GREATER_EQUAL expr
    (30) expr -> expr . LESS_EQUAL expr
    (31) expr -> expr . GREATER_THAN expr
    (32) expr -> expr . LESS_THAN expr
    (33) expr -> expr . OR expr
    (34) expr -> expr . AND expr
    (35) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 47 (defvar -> VAR type iden EQ expr .)
    LSQUAREBR       shift and go to state 46
    QMARK           shift and go to state 47
    PARITY          shift and go to state 48
    NOT_EQ          shift and go to state 49
    DIVIDE          shift and go to state 50
    TIMES           shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    MOD             shift and go to state 54
    GREATER_EQUAL   shift and go to state 55
    LESS_EQUAL      shift and go to state 56
    GREATER_THAN    shift and go to state 57
    LESS_THAN       shift and go to state 58
    OR              shift and go to state 59
    AND             shift and go to state 60
    EQ              shift and go to state 61


state 118

    (9) stmt -> IF LPAREN expr RPAREN stmt else_choice .

    IF              reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    FOR             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RETURN          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LBRACE          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    MINUS           reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    PLUS            reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NOT             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LSQUAREBR       reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    VAR             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    DEF             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    IDEN            reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NUM             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RBRACE          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    ELSE            reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)


state 119

    (11) else_choice -> empty .

    ELSE            reduce using rule 11 (else_choice -> empty .)
    IF              reduce using rule 11 (else_choice -> empty .)
    FOR             reduce using rule 11 (else_choice -> empty .)
    RETURN          reduce using rule 11 (else_choice -> empty .)
    LBRACE          reduce using rule 11 (else_choice -> empty .)
    MINUS           reduce using rule 11 (else_choice -> empty .)
    PLUS            reduce using rule 11 (else_choice -> empty .)
    NOT             reduce using rule 11 (else_choice -> empty .)
    LSQUAREBR       reduce using rule 11 (else_choice -> empty .)
    VAR             reduce using rule 11 (else_choice -> empty .)
    DEF             reduce using rule 11 (else_choice -> empty .)
    IDEN            reduce using rule 11 (else_choice -> empty .)
    NUM             reduce using rule 11 (else_choice -> empty .)
    RBRACE          reduce using rule 11 (else_choice -> empty .)


state 120

    (12) else_choice -> ELSE . stmt
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (46) defvar -> . VAR type iden
    (47) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (51) iden -> . IDEN
    (55) num -> . NUM

    IF              shift and go to state 29
    FOR             shift and go to state 31
    RETURN          shift and go to state 32
    LBRACE          shift and go to state 24
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    VAR             shift and go to state 38
    DEF             shift and go to state 3
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    stmt                           shift and go to state 123
    expr                           shift and go to state 27
    defvar                         shift and go to state 28
    func                           shift and go to state 30
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 121

    (10) stmt -> IF LPAREN error RPAREN stmt else_choice .

    IF              reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    FOR             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RETURN          reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LBRACE          reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    MINUS           reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    PLUS            reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NOT             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LSQUAREBR       reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    VAR             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    DEF             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    IDEN            reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NUM             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RBRACE          reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    ELSE            reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)


state 122

    (14) stmt -> FOR LPAREN expr TO expr RPAREN . stmt
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) expr -> . iden LPAREN clist RPAREN
    (18) expr -> . iden LPAREN error RPAREN
    (19) expr -> . expr LSQUAREBR expr RSQUAREBR
    (20) expr -> . expr LSQUAREBR error RSQUAREBR
    (21) expr -> . expr QMARK expr COLON expr
    (22) expr -> . expr PARITY expr
    (23) expr -> . expr NOT_EQ expr
    (24) expr -> . expr DIVIDE expr
    (25) expr -> . expr TIMES expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr PLUS expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr GREATER_EQUAL expr
    (30) expr -> . expr LESS_EQUAL expr
    (31) expr -> . expr GREATER_THAN expr
    (32) expr -> . expr LESS_THAN expr
    (33) expr -> . expr OR expr
    (34) expr -> . expr AND expr
    (35) expr -> . expr EQ expr
    (36) expr -> . MINUS expr
    (37) expr -> . PLUS expr
    (38) expr -> . NOT expr
    (39) expr -> . LSQUAREBR clist RSQUAREBR
    (40) expr -> . LSQUAREBR error RSQUAREBR
    (41) expr -> . iden
    (42) expr -> . num
    (46) defvar -> . VAR type iden
    (47) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (51) iden -> . IDEN
    (55) num -> . NUM

    IF              shift and go to state 29
    FOR             shift and go to state 31
    RETURN          shift and go to state 32
    LBRACE          shift and go to state 24
    MINUS           shift and go to state 34
    PLUS            shift and go to state 35
    NOT             shift and go to state 36
    LSQUAREBR       shift and go to state 33
    VAR             shift and go to state 38
    DEF             shift and go to state 3
    IDEN            shift and go to state 10
    NUM             shift and go to state 39

    expr                           shift and go to state 27
    stmt                           shift and go to state 124
    defvar                         shift and go to state 28
    func                           shift and go to state 30
    iden                           shift and go to state 23
    num                            shift and go to state 37

state 123

    (12) else_choice -> ELSE stmt .

    ELSE            reduce using rule 12 (else_choice -> ELSE stmt .)
    IF              reduce using rule 12 (else_choice -> ELSE stmt .)
    FOR             reduce using rule 12 (else_choice -> ELSE stmt .)
    RETURN          reduce using rule 12 (else_choice -> ELSE stmt .)
    LBRACE          reduce using rule 12 (else_choice -> ELSE stmt .)
    MINUS           reduce using rule 12 (else_choice -> ELSE stmt .)
    PLUS            reduce using rule 12 (else_choice -> ELSE stmt .)
    NOT             reduce using rule 12 (else_choice -> ELSE stmt .)
    LSQUAREBR       reduce using rule 12 (else_choice -> ELSE stmt .)
    VAR             reduce using rule 12 (else_choice -> ELSE stmt .)
    DEF             reduce using rule 12 (else_choice -> ELSE stmt .)
    IDEN            reduce using rule 12 (else_choice -> ELSE stmt .)
    NUM             reduce using rule 12 (else_choice -> ELSE stmt .)
    RBRACE          reduce using rule 12 (else_choice -> ELSE stmt .)


state 124

    (14) stmt -> FOR LPAREN expr TO expr RPAREN stmt .

    IF              reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    FOR             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    LBRACE          reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    MINUS           reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    PLUS            reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    NOT             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    LSQUAREBR       reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    VAR             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    DEF             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    IDEN            reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    NUM             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    RBRACE          reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 114 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 115 resolved as shift
