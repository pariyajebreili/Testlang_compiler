Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    STR
    COLON
    VOID
    PRINT
    IN
    NUM
    INT
    TRUE
    FALSE
    VECTOR

Grammar

Rule 0     S' -> prog
Rule 1     prog -> func
Rule 2     prog -> func prog
Rule 3     func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE
Rule 4     body -> stmt
Rule 5     body -> stmt body
Rule 6     stmt -> expr SEMI_COLON
Rule 7     stmt -> defvar SEMI_COLON
Rule 8     stmt -> IF LPAREN expr RPAREN stmt
Rule 9     stmt -> IF LPAREN expr RPAREN stmt ELSE stmt
Rule 10    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 11    stmt -> FOR LPAREN ID TO expr RPAREN stmt
Rule 12    stmt -> RETURN expr SEMI_COLON
Rule 13    stmt -> LBRACE body RBRACE
Rule 14    defvar -> VAR TYPE ID
Rule 15    flist -> TYPE ID
Rule 16    flist -> TYPE ID COMMA flist
Rule 17    flist -> <empty>
Rule 18    clist -> expr
Rule 19    clist -> expr COMMA clist
Rule 20    clist -> <empty>
Rule 21    expr -> VAR LPAREN clist RPAREN
Rule 22    expr -> expr LSQUAREBR expr RSQUAREBR
Rule 23    expr -> expr EQ expr
Rule 24    expr -> expr PLUS expr
Rule 25    expr -> expr MINUS expr
Rule 26    expr -> expr TIMES expr
Rule 27    expr -> expr DIVIDE expr
Rule 28    expr -> expr MOD expr
Rule 29    expr -> expr LESS_THAN expr
Rule 30    expr -> expr GREATER_THAN expr
Rule 31    expr -> expr PARITY expr
Rule 32    expr -> expr NOT_EQ expr
Rule 33    expr -> expr LESS_EQUAL expr
Rule 34    expr -> expr GREATER_EQUAL expr
Rule 35    expr -> expr OR expr
Rule 36    expr -> expr AND expr
Rule 37    expr -> NOT expr
Rule 38    expr -> MINUS expr
Rule 39    expr -> PLUS expr
Rule 40    expr -> LPAREN expr RPAREN
Rule 41    expr -> VAR
Rule 42    expr -> NUMBER

Terminals, with rules where they appear

AND                  : 36
COLON                : 
COMMA                : 16 19
COMMENT              : 
DEF                  : 3
DIVIDE               : 27
ELSE                 : 9
EQ                   : 23
FALSE                : 
FOR                  : 11
GREATER_EQUAL        : 34
GREATER_THAN         : 30
ID                   : 3 11 14 15 16
IF                   : 8 9
IN                   : 
INT                  : 
LBRACE               : 3 13
LESS_EQUAL           : 33
LESS_THAN            : 29
LPAREN               : 3 8 9 10 11 21 40
LSQUAREBR            : 22
MINUS                : 25 38
MOD                  : 28
NOT                  : 37
NOT_EQ               : 32
NUM                  : 
NUMBER               : 42
OR                   : 35
PARITY               : 31
PLUS                 : 24 39
PRINT                : 
RBRACE               : 3 13
RETURN               : 12
RPAREN               : 3 8 9 10 11 21 40
RSQUAREBR            : 22
SEMI_COLON           : 6 7 12
STR                  : 
TIMES                : 26
TO                   : 11
TRUE                 : 
TYPE                 : 3 14 15 16
VAR                  : 14 21 41
VECTOR               : 
VOID                 : 
WHILE                : 10
error                : 

Nonterminals, with rules where they appear

body                 : 3 5 13
clist                : 19 21
defvar               : 7
expr                 : 6 8 9 10 11 12 18 19 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 38 39 40
flist                : 3 16
func                 : 1 2
prog                 : 2 0
stmt                 : 4 5 8 9 9 10 11

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE

    DEF             shift and go to state 3

    prog                           shift and go to state 1
    func                           shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> func .
    (2) prog -> func . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE

    $end            reduce using rule 1 (prog -> func .)
    DEF             shift and go to state 3

    func                           shift and go to state 2
    prog                           shift and go to state 4

state 3

    (3) func -> DEF . TYPE ID LPAREN flist RPAREN LBRACE body RBRACE

    TYPE            shift and go to state 5


state 4

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 5

    (3) func -> DEF TYPE . ID LPAREN flist RPAREN LBRACE body RBRACE

    ID              shift and go to state 6


state 6

    (3) func -> DEF TYPE ID . LPAREN flist RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 7


state 7

    (3) func -> DEF TYPE ID LPAREN . flist RPAREN LBRACE body RBRACE
    (15) flist -> . TYPE ID
    (16) flist -> . TYPE ID COMMA flist
    (17) flist -> .

    TYPE            shift and go to state 8
    RPAREN          reduce using rule 17 (flist -> .)

    flist                          shift and go to state 9

state 8

    (15) flist -> TYPE . ID
    (16) flist -> TYPE . ID COMMA flist

    ID              shift and go to state 10


state 9

    (3) func -> DEF TYPE ID LPAREN flist . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 11


state 10

    (15) flist -> TYPE ID .
    (16) flist -> TYPE ID . COMMA flist

    RPAREN          reduce using rule 15 (flist -> TYPE ID .)
    COMMA           shift and go to state 12


state 11

    (3) func -> DEF TYPE ID LPAREN flist RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 13


state 12

    (16) flist -> TYPE ID COMMA . flist
    (15) flist -> . TYPE ID
    (16) flist -> . TYPE ID COMMA flist
    (17) flist -> .

    TYPE            shift and go to state 8
    RPAREN          reduce using rule 17 (flist -> .)

    flist                          shift and go to state 14

state 13

    (3) func -> DEF TYPE ID LPAREN flist RPAREN LBRACE . body RBRACE
    (4) body -> . stmt
    (5) body -> . stmt body
    (6) stmt -> . expr SEMI_COLON
    (7) stmt -> . defvar SEMI_COLON
    (8) stmt -> . IF LPAREN expr RPAREN stmt
    (9) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (10) stmt -> . WHILE LPAREN expr RPAREN stmt
    (11) stmt -> . FOR LPAREN ID TO expr RPAREN stmt
    (12) stmt -> . RETURN expr SEMI_COLON
    (13) stmt -> . LBRACE body RBRACE
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER
    (14) defvar -> . VAR TYPE ID

    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    LBRACE          shift and go to state 16
    VAR             shift and go to state 25
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    body                           shift and go to state 17
    stmt                           shift and go to state 18
    expr                           shift and go to state 19
    defvar                         shift and go to state 20

state 14

    (16) flist -> TYPE ID COMMA flist .

    RPAREN          reduce using rule 16 (flist -> TYPE ID COMMA flist .)


state 15

    (40) expr -> LPAREN . expr RPAREN
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 30

state 16

    (13) stmt -> LBRACE . body RBRACE
    (4) body -> . stmt
    (5) body -> . stmt body
    (6) stmt -> . expr SEMI_COLON
    (7) stmt -> . defvar SEMI_COLON
    (8) stmt -> . IF LPAREN expr RPAREN stmt
    (9) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (10) stmt -> . WHILE LPAREN expr RPAREN stmt
    (11) stmt -> . FOR LPAREN ID TO expr RPAREN stmt
    (12) stmt -> . RETURN expr SEMI_COLON
    (13) stmt -> . LBRACE body RBRACE
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER
    (14) defvar -> . VAR TYPE ID

    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    LBRACE          shift and go to state 16
    VAR             shift and go to state 25
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    body                           shift and go to state 32
    stmt                           shift and go to state 18
    expr                           shift and go to state 19
    defvar                         shift and go to state 20

state 17

    (3) func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 33


state 18

    (4) body -> stmt .
    (5) body -> stmt . body
    (4) body -> . stmt
    (5) body -> . stmt body
    (6) stmt -> . expr SEMI_COLON
    (7) stmt -> . defvar SEMI_COLON
    (8) stmt -> . IF LPAREN expr RPAREN stmt
    (9) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (10) stmt -> . WHILE LPAREN expr RPAREN stmt
    (11) stmt -> . FOR LPAREN ID TO expr RPAREN stmt
    (12) stmt -> . RETURN expr SEMI_COLON
    (13) stmt -> . LBRACE body RBRACE
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER
    (14) defvar -> . VAR TYPE ID

    RBRACE          reduce using rule 4 (body -> stmt .)
    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    LBRACE          shift and go to state 16
    VAR             shift and go to state 25
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    stmt                           shift and go to state 18
    body                           shift and go to state 34
    expr                           shift and go to state 19
    defvar                         shift and go to state 20

state 19

    (6) stmt -> expr . SEMI_COLON
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 35
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50


state 20

    (7) stmt -> defvar . SEMI_COLON

    SEMI_COLON      shift and go to state 51


state 21

    (8) stmt -> IF . LPAREN expr RPAREN stmt
    (9) stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt

    LPAREN          shift and go to state 52


state 22

    (10) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 53


state 23

    (11) stmt -> FOR . LPAREN ID TO expr RPAREN stmt

    LPAREN          shift and go to state 54


state 24

    (12) stmt -> RETURN . expr SEMI_COLON
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 55

state 25

    (21) expr -> VAR . LPAREN clist RPAREN
    (41) expr -> VAR .
    (14) defvar -> VAR . TYPE ID

    LPAREN          shift and go to state 56
    SEMI_COLON      reduce using rule 41 (expr -> VAR .)
    LSQUAREBR       reduce using rule 41 (expr -> VAR .)
    EQ              reduce using rule 41 (expr -> VAR .)
    PLUS            reduce using rule 41 (expr -> VAR .)
    MINUS           reduce using rule 41 (expr -> VAR .)
    TIMES           reduce using rule 41 (expr -> VAR .)
    DIVIDE          reduce using rule 41 (expr -> VAR .)
    MOD             reduce using rule 41 (expr -> VAR .)
    LESS_THAN       reduce using rule 41 (expr -> VAR .)
    GREATER_THAN    reduce using rule 41 (expr -> VAR .)
    PARITY          reduce using rule 41 (expr -> VAR .)
    NOT_EQ          reduce using rule 41 (expr -> VAR .)
    LESS_EQUAL      reduce using rule 41 (expr -> VAR .)
    GREATER_EQUAL   reduce using rule 41 (expr -> VAR .)
    OR              reduce using rule 41 (expr -> VAR .)
    AND             reduce using rule 41 (expr -> VAR .)
    TYPE            shift and go to state 57


state 26

    (39) expr -> PLUS . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 58

state 27

    (38) expr -> MINUS . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 59

state 28

    (37) expr -> NOT . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 60

state 29

    (42) expr -> NUMBER .

    SEMI_COLON      reduce using rule 42 (expr -> NUMBER .)
    LSQUAREBR       reduce using rule 42 (expr -> NUMBER .)
    EQ              reduce using rule 42 (expr -> NUMBER .)
    PLUS            reduce using rule 42 (expr -> NUMBER .)
    MINUS           reduce using rule 42 (expr -> NUMBER .)
    TIMES           reduce using rule 42 (expr -> NUMBER .)
    DIVIDE          reduce using rule 42 (expr -> NUMBER .)
    MOD             reduce using rule 42 (expr -> NUMBER .)
    LESS_THAN       reduce using rule 42 (expr -> NUMBER .)
    GREATER_THAN    reduce using rule 42 (expr -> NUMBER .)
    PARITY          reduce using rule 42 (expr -> NUMBER .)
    NOT_EQ          reduce using rule 42 (expr -> NUMBER .)
    LESS_EQUAL      reduce using rule 42 (expr -> NUMBER .)
    GREATER_EQUAL   reduce using rule 42 (expr -> NUMBER .)
    OR              reduce using rule 42 (expr -> NUMBER .)
    AND             reduce using rule 42 (expr -> NUMBER .)
    RPAREN          reduce using rule 42 (expr -> NUMBER .)
    RSQUAREBR       reduce using rule 42 (expr -> NUMBER .)
    COMMA           reduce using rule 42 (expr -> NUMBER .)


state 30

    (40) expr -> LPAREN expr . RPAREN
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

    RPAREN          shift and go to state 61
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50


state 31

    (21) expr -> VAR . LPAREN clist RPAREN
    (41) expr -> VAR .

    LPAREN          shift and go to state 56
    RPAREN          reduce using rule 41 (expr -> VAR .)
    LSQUAREBR       reduce using rule 41 (expr -> VAR .)
    EQ              reduce using rule 41 (expr -> VAR .)
    PLUS            reduce using rule 41 (expr -> VAR .)
    MINUS           reduce using rule 41 (expr -> VAR .)
    TIMES           reduce using rule 41 (expr -> VAR .)
    DIVIDE          reduce using rule 41 (expr -> VAR .)
    MOD             reduce using rule 41 (expr -> VAR .)
    LESS_THAN       reduce using rule 41 (expr -> VAR .)
    GREATER_THAN    reduce using rule 41 (expr -> VAR .)
    PARITY          reduce using rule 41 (expr -> VAR .)
    NOT_EQ          reduce using rule 41 (expr -> VAR .)
    LESS_EQUAL      reduce using rule 41 (expr -> VAR .)
    GREATER_EQUAL   reduce using rule 41 (expr -> VAR .)
    OR              reduce using rule 41 (expr -> VAR .)
    AND             reduce using rule 41 (expr -> VAR .)
    SEMI_COLON      reduce using rule 41 (expr -> VAR .)
    RSQUAREBR       reduce using rule 41 (expr -> VAR .)
    COMMA           reduce using rule 41 (expr -> VAR .)


state 32

    (13) stmt -> LBRACE body . RBRACE

    RBRACE          shift and go to state 62


state 33

    (3) func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .

    DEF             reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 3 (func -> DEF TYPE ID LPAREN flist RPAREN LBRACE body RBRACE .)


state 34

    (5) body -> stmt body .

    RBRACE          reduce using rule 5 (body -> stmt body .)


state 35

    (6) stmt -> expr SEMI_COLON .

    IF              reduce using rule 6 (stmt -> expr SEMI_COLON .)
    WHILE           reduce using rule 6 (stmt -> expr SEMI_COLON .)
    FOR             reduce using rule 6 (stmt -> expr SEMI_COLON .)
    RETURN          reduce using rule 6 (stmt -> expr SEMI_COLON .)
    LBRACE          reduce using rule 6 (stmt -> expr SEMI_COLON .)
    VAR             reduce using rule 6 (stmt -> expr SEMI_COLON .)
    NOT             reduce using rule 6 (stmt -> expr SEMI_COLON .)
    MINUS           reduce using rule 6 (stmt -> expr SEMI_COLON .)
    PLUS            reduce using rule 6 (stmt -> expr SEMI_COLON .)
    LPAREN          reduce using rule 6 (stmt -> expr SEMI_COLON .)
    NUMBER          reduce using rule 6 (stmt -> expr SEMI_COLON .)
    RBRACE          reduce using rule 6 (stmt -> expr SEMI_COLON .)
    ELSE            reduce using rule 6 (stmt -> expr SEMI_COLON .)


state 36

    (22) expr -> expr LSQUAREBR . expr RSQUAREBR
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 63

state 37

    (23) expr -> expr EQ . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 64

state 38

    (24) expr -> expr PLUS . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 65

state 39

    (25) expr -> expr MINUS . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 66

state 40

    (26) expr -> expr TIMES . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 67

state 41

    (27) expr -> expr DIVIDE . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 68

state 42

    (28) expr -> expr MOD . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 69

state 43

    (29) expr -> expr LESS_THAN . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 70

state 44

    (30) expr -> expr GREATER_THAN . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 71

state 45

    (31) expr -> expr PARITY . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 72

state 46

    (32) expr -> expr NOT_EQ . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 73

state 47

    (33) expr -> expr LESS_EQUAL . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 74

state 48

    (34) expr -> expr GREATER_EQUAL . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 75

state 49

    (35) expr -> expr OR . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 76

state 50

    (36) expr -> expr AND . expr
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 77

state 51

    (7) stmt -> defvar SEMI_COLON .

    IF              reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    WHILE           reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    FOR             reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    RETURN          reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    LBRACE          reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    VAR             reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    NOT             reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    MINUS           reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    PLUS            reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    LPAREN          reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    NUMBER          reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    RBRACE          reduce using rule 7 (stmt -> defvar SEMI_COLON .)
    ELSE            reduce using rule 7 (stmt -> defvar SEMI_COLON .)


state 52

    (8) stmt -> IF LPAREN . expr RPAREN stmt
    (9) stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 78

state 53

    (10) stmt -> WHILE LPAREN . expr RPAREN stmt
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 79

state 54

    (11) stmt -> FOR LPAREN . ID TO expr RPAREN stmt

    ID              shift and go to state 80


state 55

    (12) stmt -> RETURN expr . SEMI_COLON
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

    SEMI_COLON      shift and go to state 81
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50


state 56

    (21) expr -> VAR LPAREN . clist RPAREN
    (18) clist -> . expr
    (19) clist -> . expr COMMA clist
    (20) clist -> .
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    RPAREN          reduce using rule 20 (clist -> .)
    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    clist                          shift and go to state 82
    expr                           shift and go to state 83

state 57

    (14) defvar -> VAR TYPE . ID

    ID              shift and go to state 84


state 58

    (39) expr -> PLUS expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 39 (expr -> PLUS expr .)
    RPAREN          reduce using rule 39 (expr -> PLUS expr .)
    RSQUAREBR       reduce using rule 39 (expr -> PLUS expr .)
    COMMA           reduce using rule 39 (expr -> PLUS expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! EQ              [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! PLUS            [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! PARITY          [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! NOT_EQ          [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! OR              [ reduce using rule 39 (expr -> PLUS expr .) ]
  ! AND             [ reduce using rule 39 (expr -> PLUS expr .) ]


state 59

    (38) expr -> MINUS expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 38 (expr -> MINUS expr .)
    RPAREN          reduce using rule 38 (expr -> MINUS expr .)
    RSQUAREBR       reduce using rule 38 (expr -> MINUS expr .)
    COMMA           reduce using rule 38 (expr -> MINUS expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! EQ              [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! PLUS            [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! PARITY          [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! NOT_EQ          [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! OR              [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! AND             [ reduce using rule 38 (expr -> MINUS expr .) ]


state 60

    (37) expr -> NOT expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 37 (expr -> NOT expr .)
    RPAREN          reduce using rule 37 (expr -> NOT expr .)
    RSQUAREBR       reduce using rule 37 (expr -> NOT expr .)
    COMMA           reduce using rule 37 (expr -> NOT expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 37 (expr -> NOT expr .) ]
  ! EQ              [ reduce using rule 37 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 37 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> NOT expr .) ]
  ! LESS_THAN       [ reduce using rule 37 (expr -> NOT expr .) ]
  ! GREATER_THAN    [ reduce using rule 37 (expr -> NOT expr .) ]
  ! PARITY          [ reduce using rule 37 (expr -> NOT expr .) ]
  ! NOT_EQ          [ reduce using rule 37 (expr -> NOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 37 (expr -> NOT expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 37 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 37 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 37 (expr -> NOT expr .) ]


state 61

    (40) expr -> LPAREN expr RPAREN .

    SEMI_COLON      reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    LSQUAREBR       reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    LESS_THAN       reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    GREATER_THAN    reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    PARITY          reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    NOT_EQ          reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    LESS_EQUAL      reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    GREATER_EQUAL   reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    RSQUAREBR       reduce using rule 40 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 40 (expr -> LPAREN expr RPAREN .)


state 62

    (13) stmt -> LBRACE body RBRACE .

    IF              reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    WHILE           reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    FOR             reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    RETURN          reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    VAR             reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    NOT             reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    MINUS           reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    PLUS            reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    LPAREN          reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    NUMBER          reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 13 (stmt -> LBRACE body RBRACE .)
    ELSE            reduce using rule 13 (stmt -> LBRACE body RBRACE .)


state 63

    (22) expr -> expr LSQUAREBR expr . RSQUAREBR
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

    RSQUAREBR       shift and go to state 85
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50


state 64

    (23) expr -> expr EQ expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 23 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 23 (expr -> expr EQ expr .)
    RSQUAREBR       reduce using rule 23 (expr -> expr EQ expr .)
    COMMA           reduce using rule 23 (expr -> expr EQ expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! LESS_THAN       [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! PARITY          [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! NOT_EQ          [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! LESS_EQUAL      [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! OR              [ reduce using rule 23 (expr -> expr EQ expr .) ]
  ! AND             [ reduce using rule 23 (expr -> expr EQ expr .) ]


state 65

    (24) expr -> expr PLUS expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 24 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 24 (expr -> expr PLUS expr .)
    RSQUAREBR       reduce using rule 24 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 24 (expr -> expr PLUS expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! EQ              [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! PARITY          [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! NOT_EQ          [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 24 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 24 (expr -> expr PLUS expr .) ]


state 66

    (25) expr -> expr MINUS expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 25 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 25 (expr -> expr MINUS expr .)
    RSQUAREBR       reduce using rule 25 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 25 (expr -> expr MINUS expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! EQ              [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! PLUS            [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! PARITY          [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! NOT_EQ          [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 25 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 25 (expr -> expr MINUS expr .) ]


state 67

    (26) expr -> expr TIMES expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 26 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 26 (expr -> expr TIMES expr .)
    RSQUAREBR       reduce using rule 26 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 26 (expr -> expr TIMES expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! EQ              [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! PLUS            [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! LESS_THAN       [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN    [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! PARITY          [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! NOT_EQ          [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! LESS_EQUAL      [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 26 (expr -> expr TIMES expr .) ]


state 68

    (27) expr -> expr DIVIDE expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 27 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 27 (expr -> expr DIVIDE expr .)
    RSQUAREBR       reduce using rule 27 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 27 (expr -> expr DIVIDE expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! EQ              [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! MOD             [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN       [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN    [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! PARITY          [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! NOT_EQ          [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! LESS_EQUAL      [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 27 (expr -> expr DIVIDE expr .) ]


state 69

    (28) expr -> expr MOD expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 28 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 28 (expr -> expr MOD expr .)
    RSQUAREBR       reduce using rule 28 (expr -> expr MOD expr .)
    COMMA           reduce using rule 28 (expr -> expr MOD expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! EQ              [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! PLUS            [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! LESS_THAN       [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! GREATER_THAN    [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! PARITY          [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! NOT_EQ          [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! LESS_EQUAL      [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! OR              [ reduce using rule 28 (expr -> expr MOD expr .) ]
  ! AND             [ reduce using rule 28 (expr -> expr MOD expr .) ]


state 70

    (29) expr -> expr LESS_THAN expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 29 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 29 (expr -> expr LESS_THAN expr .)
    RSQUAREBR       reduce using rule 29 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 29 (expr -> expr LESS_THAN expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! EQ              [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! PARITY          [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! NOT_EQ          [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 29 (expr -> expr LESS_THAN expr .) ]


state 71

    (30) expr -> expr GREATER_THAN expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 30 (expr -> expr GREATER_THAN expr .)
    RPAREN          reduce using rule 30 (expr -> expr GREATER_THAN expr .)
    RSQUAREBR       reduce using rule 30 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 30 (expr -> expr GREATER_THAN expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! EQ              [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! PLUS            [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! MOD             [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! PARITY          [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! NOT_EQ          [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! OR              [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]
  ! AND             [ reduce using rule 30 (expr -> expr GREATER_THAN expr .) ]


state 72

    (31) expr -> expr PARITY expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 31 (expr -> expr PARITY expr .)
    RPAREN          reduce using rule 31 (expr -> expr PARITY expr .)
    RSQUAREBR       reduce using rule 31 (expr -> expr PARITY expr .)
    COMMA           reduce using rule 31 (expr -> expr PARITY expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! EQ              [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! PLUS            [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! TIMES           [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! MOD             [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! LESS_THAN       [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! GREATER_THAN    [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! PARITY          [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! NOT_EQ          [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! LESS_EQUAL      [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! OR              [ reduce using rule 31 (expr -> expr PARITY expr .) ]
  ! AND             [ reduce using rule 31 (expr -> expr PARITY expr .) ]


state 73

    (32) expr -> expr NOT_EQ expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 32 (expr -> expr NOT_EQ expr .)
    RPAREN          reduce using rule 32 (expr -> expr NOT_EQ expr .)
    RSQUAREBR       reduce using rule 32 (expr -> expr NOT_EQ expr .)
    COMMA           reduce using rule 32 (expr -> expr NOT_EQ expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! EQ              [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! PLUS            [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! LESS_THAN       [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! PARITY          [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! NOT_EQ          [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! LESS_EQUAL      [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! OR              [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]
  ! AND             [ reduce using rule 32 (expr -> expr NOT_EQ expr .) ]


state 74

    (33) expr -> expr LESS_EQUAL expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 33 (expr -> expr LESS_EQUAL expr .)
    RPAREN          reduce using rule 33 (expr -> expr LESS_EQUAL expr .)
    RSQUAREBR       reduce using rule 33 (expr -> expr LESS_EQUAL expr .)
    COMMA           reduce using rule 33 (expr -> expr LESS_EQUAL expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! EQ              [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! PARITY          [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! NOT_EQ          [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! OR              [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]
  ! AND             [ reduce using rule 33 (expr -> expr LESS_EQUAL expr .) ]


state 75

    (34) expr -> expr GREATER_EQUAL expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 34 (expr -> expr GREATER_EQUAL expr .)
    RPAREN          reduce using rule 34 (expr -> expr GREATER_EQUAL expr .)
    RSQUAREBR       reduce using rule 34 (expr -> expr GREATER_EQUAL expr .)
    COMMA           reduce using rule 34 (expr -> expr GREATER_EQUAL expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! EQ              [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! MOD             [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! PARITY          [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! NOT_EQ          [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! OR              [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]
  ! AND             [ reduce using rule 34 (expr -> expr GREATER_EQUAL expr .) ]


state 76

    (35) expr -> expr OR expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 35 (expr -> expr OR expr .)
    RPAREN          reduce using rule 35 (expr -> expr OR expr .)
    RSQUAREBR       reduce using rule 35 (expr -> expr OR expr .)
    COMMA           reduce using rule 35 (expr -> expr OR expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! PARITY          [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! NOT_EQ          [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 35 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 35 (expr -> expr OR expr .) ]


state 77

    (36) expr -> expr AND expr .
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
    SEMI_COLON      reduce using rule 36 (expr -> expr AND expr .)
    RPAREN          reduce using rule 36 (expr -> expr AND expr .)
    RSQUAREBR       reduce using rule 36 (expr -> expr AND expr .)
    COMMA           reduce using rule 36 (expr -> expr AND expr .)
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50

  ! LSQUAREBR       [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! PARITY          [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! NOT_EQ          [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 36 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 36 (expr -> expr AND expr .) ]


state 78

    (8) stmt -> IF LPAREN expr . RPAREN stmt
    (9) stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

    RPAREN          shift and go to state 86
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50


state 79

    (10) stmt -> WHILE LPAREN expr . RPAREN stmt
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

    RPAREN          shift and go to state 87
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50


state 80

    (11) stmt -> FOR LPAREN ID . TO expr RPAREN stmt

    TO              shift and go to state 88


state 81

    (12) stmt -> RETURN expr SEMI_COLON .

    IF              reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    WHILE           reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    FOR             reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    RETURN          reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    LBRACE          reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    VAR             reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    NOT             reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    MINUS           reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    PLUS            reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    LPAREN          reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    NUMBER          reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    RBRACE          reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)
    ELSE            reduce using rule 12 (stmt -> RETURN expr SEMI_COLON .)


state 82

    (21) expr -> VAR LPAREN clist . RPAREN

    RPAREN          shift and go to state 89


state 83

    (18) clist -> expr .
    (19) clist -> expr . COMMA clist
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

    RPAREN          reduce using rule 18 (clist -> expr .)
    COMMA           shift and go to state 90
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50


state 84

    (14) defvar -> VAR TYPE ID .

    SEMI_COLON      reduce using rule 14 (defvar -> VAR TYPE ID .)


state 85

    (22) expr -> expr LSQUAREBR expr RSQUAREBR .

    SEMI_COLON      reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LSQUAREBR       reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    EQ              reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    PLUS            reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MINUS           reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TIMES           reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    DIVIDE          reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MOD             reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_THAN       reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_THAN    reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    PARITY          reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    NOT_EQ          reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_EQUAL      reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_EQUAL   reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    OR              reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    AND             reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RPAREN          reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RSQUAREBR       reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COMMA           reduce using rule 22 (expr -> expr LSQUAREBR expr RSQUAREBR .)


state 86

    (8) stmt -> IF LPAREN expr RPAREN . stmt
    (9) stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt
    (6) stmt -> . expr SEMI_COLON
    (7) stmt -> . defvar SEMI_COLON
    (8) stmt -> . IF LPAREN expr RPAREN stmt
    (9) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (10) stmt -> . WHILE LPAREN expr RPAREN stmt
    (11) stmt -> . FOR LPAREN ID TO expr RPAREN stmt
    (12) stmt -> . RETURN expr SEMI_COLON
    (13) stmt -> . LBRACE body RBRACE
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER
    (14) defvar -> . VAR TYPE ID

    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    LBRACE          shift and go to state 16
    VAR             shift and go to state 25
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 19
    stmt                           shift and go to state 91
    defvar                         shift and go to state 20

state 87

    (10) stmt -> WHILE LPAREN expr RPAREN . stmt
    (6) stmt -> . expr SEMI_COLON
    (7) stmt -> . defvar SEMI_COLON
    (8) stmt -> . IF LPAREN expr RPAREN stmt
    (9) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (10) stmt -> . WHILE LPAREN expr RPAREN stmt
    (11) stmt -> . FOR LPAREN ID TO expr RPAREN stmt
    (12) stmt -> . RETURN expr SEMI_COLON
    (13) stmt -> . LBRACE body RBRACE
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER
    (14) defvar -> . VAR TYPE ID

    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    LBRACE          shift and go to state 16
    VAR             shift and go to state 25
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 19
    stmt                           shift and go to state 92
    defvar                         shift and go to state 20

state 88

    (11) stmt -> FOR LPAREN ID TO . expr RPAREN stmt
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 93

state 89

    (21) expr -> VAR LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    EQ              reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    PLUS            reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    MINUS           reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    TIMES           reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    MOD             reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    PARITY          reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    NOT_EQ          reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    LESS_EQUAL      reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    GREATER_EQUAL   reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    OR              reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    AND             reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    RPAREN          reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)
    COMMA           reduce using rule 21 (expr -> VAR LPAREN clist RPAREN .)


state 90

    (19) clist -> expr COMMA . clist
    (18) clist -> . expr
    (19) clist -> . expr COMMA clist
    (20) clist -> .
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER

    RPAREN          reduce using rule 20 (clist -> .)
    VAR             shift and go to state 31
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 83
    clist                          shift and go to state 94

state 91

    (8) stmt -> IF LPAREN expr RPAREN stmt .
    (9) stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    VAR             reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    PLUS            reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .)
    ELSE            shift and go to state 95

  ! ELSE            [ reduce using rule 8 (stmt -> IF LPAREN expr RPAREN stmt .) ]


state 92

    (10) stmt -> WHILE LPAREN expr RPAREN stmt .

    IF              reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    VAR             reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    PLUS            reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LPAREN          reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NUMBER          reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 10 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 93

    (11) stmt -> FOR LPAREN ID TO expr . RPAREN stmt
    (22) expr -> expr . LSQUAREBR expr RSQUAREBR
    (23) expr -> expr . EQ expr
    (24) expr -> expr . PLUS expr
    (25) expr -> expr . MINUS expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . DIVIDE expr
    (28) expr -> expr . MOD expr
    (29) expr -> expr . LESS_THAN expr
    (30) expr -> expr . GREATER_THAN expr
    (31) expr -> expr . PARITY expr
    (32) expr -> expr . NOT_EQ expr
    (33) expr -> expr . LESS_EQUAL expr
    (34) expr -> expr . GREATER_EQUAL expr
    (35) expr -> expr . OR expr
    (36) expr -> expr . AND expr

    RPAREN          shift and go to state 96
    LSQUAREBR       shift and go to state 36
    EQ              shift and go to state 37
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESS_THAN       shift and go to state 43
    GREATER_THAN    shift and go to state 44
    PARITY          shift and go to state 45
    NOT_EQ          shift and go to state 46
    LESS_EQUAL      shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    OR              shift and go to state 49
    AND             shift and go to state 50


state 94

    (19) clist -> expr COMMA clist .

    RPAREN          reduce using rule 19 (clist -> expr COMMA clist .)


state 95

    (9) stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt
    (6) stmt -> . expr SEMI_COLON
    (7) stmt -> . defvar SEMI_COLON
    (8) stmt -> . IF LPAREN expr RPAREN stmt
    (9) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (10) stmt -> . WHILE LPAREN expr RPAREN stmt
    (11) stmt -> . FOR LPAREN ID TO expr RPAREN stmt
    (12) stmt -> . RETURN expr SEMI_COLON
    (13) stmt -> . LBRACE body RBRACE
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER
    (14) defvar -> . VAR TYPE ID

    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    LBRACE          shift and go to state 16
    VAR             shift and go to state 25
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 19
    stmt                           shift and go to state 97
    defvar                         shift and go to state 20

state 96

    (11) stmt -> FOR LPAREN ID TO expr RPAREN . stmt
    (6) stmt -> . expr SEMI_COLON
    (7) stmt -> . defvar SEMI_COLON
    (8) stmt -> . IF LPAREN expr RPAREN stmt
    (9) stmt -> . IF LPAREN expr RPAREN stmt ELSE stmt
    (10) stmt -> . WHILE LPAREN expr RPAREN stmt
    (11) stmt -> . FOR LPAREN ID TO expr RPAREN stmt
    (12) stmt -> . RETURN expr SEMI_COLON
    (13) stmt -> . LBRACE body RBRACE
    (21) expr -> . VAR LPAREN clist RPAREN
    (22) expr -> . expr LSQUAREBR expr RSQUAREBR
    (23) expr -> . expr EQ expr
    (24) expr -> . expr PLUS expr
    (25) expr -> . expr MINUS expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr DIVIDE expr
    (28) expr -> . expr MOD expr
    (29) expr -> . expr LESS_THAN expr
    (30) expr -> . expr GREATER_THAN expr
    (31) expr -> . expr PARITY expr
    (32) expr -> . expr NOT_EQ expr
    (33) expr -> . expr LESS_EQUAL expr
    (34) expr -> . expr GREATER_EQUAL expr
    (35) expr -> . expr OR expr
    (36) expr -> . expr AND expr
    (37) expr -> . NOT expr
    (38) expr -> . MINUS expr
    (39) expr -> . PLUS expr
    (40) expr -> . LPAREN expr RPAREN
    (41) expr -> . VAR
    (42) expr -> . NUMBER
    (14) defvar -> . VAR TYPE ID

    IF              shift and go to state 21
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    RETURN          shift and go to state 24
    LBRACE          shift and go to state 16
    VAR             shift and go to state 25
    NOT             shift and go to state 28
    MINUS           shift and go to state 27
    PLUS            shift and go to state 26
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 29

    expr                           shift and go to state 19
    stmt                           shift and go to state 98
    defvar                         shift and go to state 20

state 97

    (9) stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .

    IF              reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    WHILE           reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    FOR             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RETURN          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LBRACE          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    VAR             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NOT             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    MINUS           reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    PLUS            reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    LPAREN          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    NUMBER          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    RBRACE          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)
    ELSE            reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt ELSE stmt .)


state 98

    (11) stmt -> FOR LPAREN ID TO expr RPAREN stmt .

    IF              reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    WHILE           reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    FOR             reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    RETURN          reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    LBRACE          reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    VAR             reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    NOT             reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    MINUS           reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    PLUS            reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    LPAREN          reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    NUMBER          reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    RBRACE          reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)
    ELSE            reduce using rule 11 (stmt -> FOR LPAREN ID TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQUAREBR in state 58 resolved as shift
WARNING: shift/reduce conflict for EQ in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for MOD in state 58 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 58 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 58 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 58 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 58 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 58 resolved as shift
WARNING: shift/reduce conflict for OR in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 58 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 59 resolved as shift
WARNING: shift/reduce conflict for EQ in state 59 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 59 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 59 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 59 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 59 resolved as shift
WARNING: shift/reduce conflict for MOD in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 59 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 59 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 59 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 59 resolved as shift
WARNING: shift/reduce conflict for OR in state 59 resolved as shift
WARNING: shift/reduce conflict for AND in state 59 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 60 resolved as shift
WARNING: shift/reduce conflict for EQ in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 60 resolved as shift
WARNING: shift/reduce conflict for MOD in state 60 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 60 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 60 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 60 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 60 resolved as shift
WARNING: shift/reduce conflict for OR in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 64 resolved as shift
WARNING: shift/reduce conflict for EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 64 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 64 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 64 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 64 resolved as shift
WARNING: shift/reduce conflict for MOD in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 64 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 64 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 64 resolved as shift
WARNING: shift/reduce conflict for OR in state 64 resolved as shift
WARNING: shift/reduce conflict for AND in state 64 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 65 resolved as shift
WARNING: shift/reduce conflict for EQ in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 65 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 65 resolved as shift
WARNING: shift/reduce conflict for MOD in state 65 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 65 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 65 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 65 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 66 resolved as shift
WARNING: shift/reduce conflict for EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 66 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 66 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 66 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 66 resolved as shift
WARNING: shift/reduce conflict for MOD in state 66 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 66 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 66 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 66 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 66 resolved as shift
WARNING: shift/reduce conflict for OR in state 66 resolved as shift
WARNING: shift/reduce conflict for AND in state 66 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 67 resolved as shift
WARNING: shift/reduce conflict for EQ in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 67 resolved as shift
WARNING: shift/reduce conflict for MOD in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 67 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 67 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 67 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 68 resolved as shift
WARNING: shift/reduce conflict for EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 68 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 68 resolved as shift
WARNING: shift/reduce conflict for MOD in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 68 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 68 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 68 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 69 resolved as shift
WARNING: shift/reduce conflict for EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 69 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 69 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 69 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 69 resolved as shift
WARNING: shift/reduce conflict for MOD in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 69 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 69 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 69 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 69 resolved as shift
WARNING: shift/reduce conflict for OR in state 69 resolved as shift
WARNING: shift/reduce conflict for AND in state 69 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 70 resolved as shift
WARNING: shift/reduce conflict for EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 70 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 70 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 70 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 70 resolved as shift
WARNING: shift/reduce conflict for MOD in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 70 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 70 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 70 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 70 resolved as shift
WARNING: shift/reduce conflict for OR in state 70 resolved as shift
WARNING: shift/reduce conflict for AND in state 70 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 71 resolved as shift
WARNING: shift/reduce conflict for EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for MOD in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 71 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 71 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 71 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 72 resolved as shift
WARNING: shift/reduce conflict for EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 72 resolved as shift
WARNING: shift/reduce conflict for MOD in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 72 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 72 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 72 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 73 resolved as shift
WARNING: shift/reduce conflict for EQ in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for MOD in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 73 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 73 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for MOD in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 74 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 74 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 75 resolved as shift
WARNING: shift/reduce conflict for MOD in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 75 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 75 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 76 resolved as shift
WARNING: shift/reduce conflict for EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 76 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 76 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 76 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 76 resolved as shift
WARNING: shift/reduce conflict for MOD in state 76 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 76 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 76 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 76 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 76 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 77 resolved as shift
WARNING: shift/reduce conflict for EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 77 resolved as shift
WARNING: shift/reduce conflict for MOD in state 77 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 77 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 77 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 77 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 91 resolved as shift
