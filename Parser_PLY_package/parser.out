Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> prog
Rule 1     prog -> func
Rule 2     prog -> func prog
Rule 3     func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
Rule 4     func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE
Rule 5     body -> stmt
Rule 6     body -> stmt body
Rule 7     stmt -> expr SEMI_COLON
Rule 8     stmt -> defvar SEMI_COLON
Rule 9     stmt -> IF LPAREN expr RPAREN stmt else_choice
Rule 10    stmt -> IF LPAREN error RPAREN stmt else_choice
Rule 11    else_choice -> empty
Rule 12    else_choice -> ELSE stmt
Rule 13    stmt -> func
Rule 14    stmt -> FOR LPAREN expr TO expr RPAREN stmt
Rule 15    stmt -> RETURN expr SEMI_COLON
Rule 16    stmt -> LBRACE body RBRACE
Rule 17    stmt -> WHILE LPAREN expr RPAREN stmt
Rule 18    expr -> iden LPAREN clist RPAREN
Rule 19    expr -> iden LPAREN error RPAREN
Rule 20    expr -> expr LSQUAREBR expr RSQUAREBR
Rule 21    expr -> expr LSQUAREBR error RSQUAREBR
Rule 22    expr -> expr QMARK expr COLON expr
Rule 23    expr -> expr PARITY expr
Rule 24    expr -> expr NOT_EQ expr
Rule 25    expr -> expr DIVIDE expr
Rule 26    expr -> expr TIMES expr
Rule 27    expr -> expr MINUS expr
Rule 28    expr -> expr PLUS expr
Rule 29    expr -> expr MOD expr
Rule 30    expr -> expr GREATER_EQUAL expr
Rule 31    expr -> expr LESS_EQUAL expr
Rule 32    expr -> expr GREATER_THAN expr
Rule 33    expr -> expr LESS_THAN expr
Rule 34    expr -> expr OR expr
Rule 35    expr -> expr AND expr
Rule 36    expr -> expr EQ expr
Rule 37    expr -> MINUS expr
Rule 38    expr -> PLUS expr
Rule 39    expr -> NOT expr
Rule 40    expr -> LSQUAREBR clist RSQUAREBR
Rule 41    expr -> LSQUAREBR error RSQUAREBR
Rule 42    expr -> iden
Rule 43    expr -> num
Rule 44    clist -> empty
Rule 45    clist -> expr
Rule 46    clist -> expr COMMA clist
Rule 47    defvar -> VAR type iden
Rule 48    defvar -> VAR type iden EQ expr
Rule 49    flist -> empty
Rule 50    flist -> type iden
Rule 51    flist -> type iden COMMA flist
Rule 52    iden -> IDEN
Rule 53    type -> INT
Rule 54    type -> VECTOR
Rule 55    type -> STRING
Rule 56    type -> NULL
Rule 57    num -> NUM
Rule 58    empty -> <empty>

Terminals, with rules where they appear

AND                  : 35
COLON                : 22
COMMA                : 46 51
DEF                  : 3 4
DIVIDE               : 25
ELSE                 : 12
EQ                   : 36 48
FOR                  : 14
GREATER_EQUAL        : 30
GREATER_THAN         : 32
IDEN                 : 52
IF                   : 9 10
INT                  : 53
LBRACE               : 3 4 16
LESS_EQUAL           : 31
LESS_THAN            : 33
LPAREN               : 3 4 9 10 14 17 18 19
LSQUAREBR            : 20 21 40 41
MINUS                : 27 37
MOD                  : 29
NOT                  : 39
NOT_EQ               : 24
NULL                 : 56
NUM                  : 57
OR                   : 34
PARITY               : 23
PLUS                 : 28 38
QMARK                : 22
RBRACE               : 3 4 16
RETURN               : 15
RPAREN               : 3 4 9 10 14 17 18 19
RSQUAREBR            : 20 21 40 41
SEMI_COLON           : 7 8 15
STRING               : 55
TIMES                : 26
TO                   : 14
VAR                  : 47 48
VECTOR               : 54
WHILE                : 17
error                : 4 10 19 21 41

Nonterminals, with rules where they appear

body                 : 3 4 6 16
clist                : 18 40 46
defvar               : 8
else_choice          : 9 10
empty                : 11 44 49
expr                 : 7 9 14 14 15 17 20 20 21 22 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 38 39 45 46 48
flist                : 3 51
func                 : 1 2 13
iden                 : 3 4 18 19 42 47 48 50 51
num                  : 43
prog                 : 2 0
stmt                 : 5 6 9 10 12 14 17
type                 : 3 4 47 48 50 51

Parsing method: LALR

state 0

    (0) S' -> . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE

    DEF             shift and go to state 3

    prog                           shift and go to state 1
    func                           shift and go to state 2

state 1

    (0) S' -> prog .



state 2

    (1) prog -> func .
    (2) prog -> func . prog
    (1) prog -> . func
    (2) prog -> . func prog
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE

    $end            reduce using rule 1 (prog -> func .)
    DEF             shift and go to state 3

    func                           shift and go to state 2
    prog                           shift and go to state 4

state 3

    (3) func -> DEF . type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> DEF . type iden LPAREN error RPAREN LBRACE body RBRACE
    (53) type -> . INT
    (54) type -> . VECTOR
    (55) type -> . STRING
    (56) type -> . NULL

    INT             shift and go to state 6
    VECTOR          shift and go to state 7
    STRING          shift and go to state 8
    NULL            shift and go to state 9

    type                           shift and go to state 5

state 4

    (2) prog -> func prog .

    $end            reduce using rule 2 (prog -> func prog .)


state 5

    (3) func -> DEF type . iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> DEF type . iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN

    IDEN            shift and go to state 11

    iden                           shift and go to state 10

state 6

    (53) type -> INT .

    IDEN            reduce using rule 53 (type -> INT .)


state 7

    (54) type -> VECTOR .

    IDEN            reduce using rule 54 (type -> VECTOR .)


state 8

    (55) type -> STRING .

    IDEN            reduce using rule 55 (type -> STRING .)


state 9

    (56) type -> NULL .

    IDEN            reduce using rule 56 (type -> NULL .)


state 10

    (3) func -> DEF type iden . LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> DEF type iden . LPAREN error RPAREN LBRACE body RBRACE

    LPAREN          shift and go to state 12


state 11

    (52) iden -> IDEN .

    LPAREN          reduce using rule 52 (iden -> IDEN .)
    COMMA           reduce using rule 52 (iden -> IDEN .)
    RPAREN          reduce using rule 52 (iden -> IDEN .)
    SEMI_COLON      reduce using rule 52 (iden -> IDEN .)
    LSQUAREBR       reduce using rule 52 (iden -> IDEN .)
    QMARK           reduce using rule 52 (iden -> IDEN .)
    PARITY          reduce using rule 52 (iden -> IDEN .)
    NOT_EQ          reduce using rule 52 (iden -> IDEN .)
    DIVIDE          reduce using rule 52 (iden -> IDEN .)
    TIMES           reduce using rule 52 (iden -> IDEN .)
    MINUS           reduce using rule 52 (iden -> IDEN .)
    PLUS            reduce using rule 52 (iden -> IDEN .)
    MOD             reduce using rule 52 (iden -> IDEN .)
    GREATER_EQUAL   reduce using rule 52 (iden -> IDEN .)
    LESS_EQUAL      reduce using rule 52 (iden -> IDEN .)
    GREATER_THAN    reduce using rule 52 (iden -> IDEN .)
    LESS_THAN       reduce using rule 52 (iden -> IDEN .)
    OR              reduce using rule 52 (iden -> IDEN .)
    AND             reduce using rule 52 (iden -> IDEN .)
    EQ              reduce using rule 52 (iden -> IDEN .)
    RSQUAREBR       reduce using rule 52 (iden -> IDEN .)
    COLON           reduce using rule 52 (iden -> IDEN .)
    TO              reduce using rule 52 (iden -> IDEN .)


state 12

    (3) func -> DEF type iden LPAREN . flist RPAREN LBRACE body RBRACE
    (4) func -> DEF type iden LPAREN . error RPAREN LBRACE body RBRACE
    (49) flist -> . empty
    (50) flist -> . type iden
    (51) flist -> . type iden COMMA flist
    (58) empty -> .
    (53) type -> . INT
    (54) type -> . VECTOR
    (55) type -> . STRING
    (56) type -> . NULL

    error           shift and go to state 15
    RPAREN          reduce using rule 58 (empty -> .)
    INT             shift and go to state 6
    VECTOR          shift and go to state 7
    STRING          shift and go to state 8
    NULL            shift and go to state 9

    type                           shift and go to state 13
    flist                          shift and go to state 14
    empty                          shift and go to state 16

state 13

    (50) flist -> type . iden
    (51) flist -> type . iden COMMA flist
    (52) iden -> . IDEN

    IDEN            shift and go to state 11

    iden                           shift and go to state 17

state 14

    (3) func -> DEF type iden LPAREN flist . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 18


state 15

    (4) func -> DEF type iden LPAREN error . RPAREN LBRACE body RBRACE

    RPAREN          shift and go to state 19


state 16

    (49) flist -> empty .

    RPAREN          reduce using rule 49 (flist -> empty .)


state 17

    (50) flist -> type iden .
    (51) flist -> type iden . COMMA flist

    RPAREN          reduce using rule 50 (flist -> type iden .)
    COMMA           shift and go to state 20


state 18

    (3) func -> DEF type iden LPAREN flist RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 21


state 19

    (4) func -> DEF type iden LPAREN error RPAREN . LBRACE body RBRACE

    LBRACE          shift and go to state 22


state 20

    (51) flist -> type iden COMMA . flist
    (49) flist -> . empty
    (50) flist -> . type iden
    (51) flist -> . type iden COMMA flist
    (58) empty -> .
    (53) type -> . INT
    (54) type -> . VECTOR
    (55) type -> . STRING
    (56) type -> . NULL

    RPAREN          reduce using rule 58 (empty -> .)
    INT             shift and go to state 6
    VECTOR          shift and go to state 7
    STRING          shift and go to state 8
    NULL            shift and go to state 9

    type                           shift and go to state 13
    flist                          shift and go to state 23
    empty                          shift and go to state 16

state 21

    (3) func -> DEF type iden LPAREN flist RPAREN LBRACE . body RBRACE
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (47) defvar -> . VAR type iden
    (48) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN
    (57) num -> . NUM

    IF              shift and go to state 30
    FOR             shift and go to state 32
    RETURN          shift and go to state 33
    LBRACE          shift and go to state 25
    WHILE           shift and go to state 34
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    VAR             shift and go to state 40
    DEF             shift and go to state 3
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    iden                           shift and go to state 24
    body                           shift and go to state 26
    stmt                           shift and go to state 27
    expr                           shift and go to state 28
    defvar                         shift and go to state 29
    func                           shift and go to state 31
    num                            shift and go to state 39

state 22

    (4) func -> DEF type iden LPAREN error RPAREN LBRACE . body RBRACE
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (47) defvar -> . VAR type iden
    (48) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN
    (57) num -> . NUM

    IF              shift and go to state 30
    FOR             shift and go to state 32
    RETURN          shift and go to state 33
    LBRACE          shift and go to state 25
    WHILE           shift and go to state 34
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    VAR             shift and go to state 40
    DEF             shift and go to state 3
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    iden                           shift and go to state 24
    body                           shift and go to state 42
    stmt                           shift and go to state 27
    expr                           shift and go to state 28
    defvar                         shift and go to state 29
    func                           shift and go to state 31
    num                            shift and go to state 39

state 23

    (51) flist -> type iden COMMA flist .

    RPAREN          reduce using rule 51 (flist -> type iden COMMA flist .)


state 24

    (18) expr -> iden . LPAREN clist RPAREN
    (19) expr -> iden . LPAREN error RPAREN
    (42) expr -> iden .

    LPAREN          shift and go to state 43
    SEMI_COLON      reduce using rule 42 (expr -> iden .)
    LSQUAREBR       reduce using rule 42 (expr -> iden .)
    QMARK           reduce using rule 42 (expr -> iden .)
    PARITY          reduce using rule 42 (expr -> iden .)
    NOT_EQ          reduce using rule 42 (expr -> iden .)
    DIVIDE          reduce using rule 42 (expr -> iden .)
    TIMES           reduce using rule 42 (expr -> iden .)
    MINUS           reduce using rule 42 (expr -> iden .)
    PLUS            reduce using rule 42 (expr -> iden .)
    MOD             reduce using rule 42 (expr -> iden .)
    GREATER_EQUAL   reduce using rule 42 (expr -> iden .)
    LESS_EQUAL      reduce using rule 42 (expr -> iden .)
    GREATER_THAN    reduce using rule 42 (expr -> iden .)
    LESS_THAN       reduce using rule 42 (expr -> iden .)
    OR              reduce using rule 42 (expr -> iden .)
    AND             reduce using rule 42 (expr -> iden .)
    EQ              reduce using rule 42 (expr -> iden .)
    COMMA           reduce using rule 42 (expr -> iden .)
    RSQUAREBR       reduce using rule 42 (expr -> iden .)
    RPAREN          reduce using rule 42 (expr -> iden .)
    COLON           reduce using rule 42 (expr -> iden .)
    TO              reduce using rule 42 (expr -> iden .)


state 25

    (16) stmt -> LBRACE . body RBRACE
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (47) defvar -> . VAR type iden
    (48) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN
    (57) num -> . NUM

    IF              shift and go to state 30
    FOR             shift and go to state 32
    RETURN          shift and go to state 33
    LBRACE          shift and go to state 25
    WHILE           shift and go to state 34
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    VAR             shift and go to state 40
    DEF             shift and go to state 3
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    body                           shift and go to state 44
    stmt                           shift and go to state 27
    expr                           shift and go to state 28
    defvar                         shift and go to state 29
    func                           shift and go to state 31
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 26

    (3) func -> DEF type iden LPAREN flist RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 45


state 27

    (5) body -> stmt .
    (6) body -> stmt . body
    (5) body -> . stmt
    (6) body -> . stmt body
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (47) defvar -> . VAR type iden
    (48) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN
    (57) num -> . NUM

    RBRACE          reduce using rule 5 (body -> stmt .)
    IF              shift and go to state 30
    FOR             shift and go to state 32
    RETURN          shift and go to state 33
    LBRACE          shift and go to state 25
    WHILE           shift and go to state 34
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    VAR             shift and go to state 40
    DEF             shift and go to state 3
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    stmt                           shift and go to state 27
    body                           shift and go to state 46
    expr                           shift and go to state 28
    defvar                         shift and go to state 29
    func                           shift and go to state 31
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 28

    (7) stmt -> expr . SEMI_COLON
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    SEMI_COLON      shift and go to state 47
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 29

    (8) stmt -> defvar . SEMI_COLON

    SEMI_COLON      shift and go to state 64


state 30

    (9) stmt -> IF . LPAREN expr RPAREN stmt else_choice
    (10) stmt -> IF . LPAREN error RPAREN stmt else_choice

    LPAREN          shift and go to state 65


state 31

    (13) stmt -> func .

    IF              reduce using rule 13 (stmt -> func .)
    FOR             reduce using rule 13 (stmt -> func .)
    RETURN          reduce using rule 13 (stmt -> func .)
    LBRACE          reduce using rule 13 (stmt -> func .)
    WHILE           reduce using rule 13 (stmt -> func .)
    MINUS           reduce using rule 13 (stmt -> func .)
    PLUS            reduce using rule 13 (stmt -> func .)
    NOT             reduce using rule 13 (stmt -> func .)
    LSQUAREBR       reduce using rule 13 (stmt -> func .)
    VAR             reduce using rule 13 (stmt -> func .)
    DEF             reduce using rule 13 (stmt -> func .)
    IDEN            reduce using rule 13 (stmt -> func .)
    NUM             reduce using rule 13 (stmt -> func .)
    RBRACE          reduce using rule 13 (stmt -> func .)
    ELSE            reduce using rule 13 (stmt -> func .)


state 32

    (14) stmt -> FOR . LPAREN expr TO expr RPAREN stmt

    LPAREN          shift and go to state 66


state 33

    (15) stmt -> RETURN . expr SEMI_COLON
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 67
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 34

    (17) stmt -> WHILE . LPAREN expr RPAREN stmt

    LPAREN          shift and go to state 68


state 35

    (40) expr -> LSQUAREBR . clist RSQUAREBR
    (41) expr -> LSQUAREBR . error RSQUAREBR
    (44) clist -> . empty
    (45) clist -> . expr
    (46) clist -> . expr COMMA clist
    (58) empty -> .
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    error           shift and go to state 70
    RSQUAREBR       reduce using rule 58 (empty -> .)
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    clist                          shift and go to state 69
    empty                          shift and go to state 71
    expr                           shift and go to state 72
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 36

    (37) expr -> MINUS . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 73
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 37

    (38) expr -> PLUS . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 74
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 38

    (39) expr -> NOT . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 75
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 39

    (43) expr -> num .

    SEMI_COLON      reduce using rule 43 (expr -> num .)
    LSQUAREBR       reduce using rule 43 (expr -> num .)
    QMARK           reduce using rule 43 (expr -> num .)
    PARITY          reduce using rule 43 (expr -> num .)
    NOT_EQ          reduce using rule 43 (expr -> num .)
    DIVIDE          reduce using rule 43 (expr -> num .)
    TIMES           reduce using rule 43 (expr -> num .)
    MINUS           reduce using rule 43 (expr -> num .)
    PLUS            reduce using rule 43 (expr -> num .)
    MOD             reduce using rule 43 (expr -> num .)
    GREATER_EQUAL   reduce using rule 43 (expr -> num .)
    LESS_EQUAL      reduce using rule 43 (expr -> num .)
    GREATER_THAN    reduce using rule 43 (expr -> num .)
    LESS_THAN       reduce using rule 43 (expr -> num .)
    OR              reduce using rule 43 (expr -> num .)
    AND             reduce using rule 43 (expr -> num .)
    EQ              reduce using rule 43 (expr -> num .)
    COMMA           reduce using rule 43 (expr -> num .)
    RSQUAREBR       reduce using rule 43 (expr -> num .)
    RPAREN          reduce using rule 43 (expr -> num .)
    COLON           reduce using rule 43 (expr -> num .)
    TO              reduce using rule 43 (expr -> num .)


state 40

    (47) defvar -> VAR . type iden
    (48) defvar -> VAR . type iden EQ expr
    (53) type -> . INT
    (54) type -> . VECTOR
    (55) type -> . STRING
    (56) type -> . NULL

    INT             shift and go to state 6
    VECTOR          shift and go to state 7
    STRING          shift and go to state 8
    NULL            shift and go to state 9

    type                           shift and go to state 76

state 41

    (57) num -> NUM .

    SEMI_COLON      reduce using rule 57 (num -> NUM .)
    LSQUAREBR       reduce using rule 57 (num -> NUM .)
    QMARK           reduce using rule 57 (num -> NUM .)
    PARITY          reduce using rule 57 (num -> NUM .)
    NOT_EQ          reduce using rule 57 (num -> NUM .)
    DIVIDE          reduce using rule 57 (num -> NUM .)
    TIMES           reduce using rule 57 (num -> NUM .)
    MINUS           reduce using rule 57 (num -> NUM .)
    PLUS            reduce using rule 57 (num -> NUM .)
    MOD             reduce using rule 57 (num -> NUM .)
    GREATER_EQUAL   reduce using rule 57 (num -> NUM .)
    LESS_EQUAL      reduce using rule 57 (num -> NUM .)
    GREATER_THAN    reduce using rule 57 (num -> NUM .)
    LESS_THAN       reduce using rule 57 (num -> NUM .)
    OR              reduce using rule 57 (num -> NUM .)
    AND             reduce using rule 57 (num -> NUM .)
    EQ              reduce using rule 57 (num -> NUM .)
    COMMA           reduce using rule 57 (num -> NUM .)
    RSQUAREBR       reduce using rule 57 (num -> NUM .)
    RPAREN          reduce using rule 57 (num -> NUM .)
    COLON           reduce using rule 57 (num -> NUM .)
    TO              reduce using rule 57 (num -> NUM .)


state 42

    (4) func -> DEF type iden LPAREN error RPAREN LBRACE body . RBRACE

    RBRACE          shift and go to state 77


state 43

    (18) expr -> iden LPAREN . clist RPAREN
    (19) expr -> iden LPAREN . error RPAREN
    (44) clist -> . empty
    (45) clist -> . expr
    (46) clist -> . expr COMMA clist
    (58) empty -> .
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    error           shift and go to state 79
    RPAREN          reduce using rule 58 (empty -> .)
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    iden                           shift and go to state 24
    clist                          shift and go to state 78
    empty                          shift and go to state 71
    expr                           shift and go to state 72
    num                            shift and go to state 39

state 44

    (16) stmt -> LBRACE body . RBRACE

    RBRACE          shift and go to state 80


state 45

    (3) func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .

    DEF             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    LBRACE          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    MINUS           reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    PLUS            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    NOT             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    LSQUAREBR       reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    IDEN            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    NUM             reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 3 (func -> DEF type iden LPAREN flist RPAREN LBRACE body RBRACE .)


state 46

    (6) body -> stmt body .

    RBRACE          reduce using rule 6 (body -> stmt body .)


state 47

    (7) stmt -> expr SEMI_COLON .

    IF              reduce using rule 7 (stmt -> expr SEMI_COLON .)
    FOR             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    RETURN          reduce using rule 7 (stmt -> expr SEMI_COLON .)
    LBRACE          reduce using rule 7 (stmt -> expr SEMI_COLON .)
    WHILE           reduce using rule 7 (stmt -> expr SEMI_COLON .)
    MINUS           reduce using rule 7 (stmt -> expr SEMI_COLON .)
    PLUS            reduce using rule 7 (stmt -> expr SEMI_COLON .)
    NOT             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    LSQUAREBR       reduce using rule 7 (stmt -> expr SEMI_COLON .)
    VAR             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    DEF             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    IDEN            reduce using rule 7 (stmt -> expr SEMI_COLON .)
    NUM             reduce using rule 7 (stmt -> expr SEMI_COLON .)
    RBRACE          reduce using rule 7 (stmt -> expr SEMI_COLON .)
    ELSE            reduce using rule 7 (stmt -> expr SEMI_COLON .)


state 48

    (20) expr -> expr LSQUAREBR . expr RSQUAREBR
    (21) expr -> expr LSQUAREBR . error RSQUAREBR
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    error           shift and go to state 82
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 81
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 49

    (22) expr -> expr QMARK . expr COLON expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 83
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 50

    (23) expr -> expr PARITY . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 84
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 51

    (24) expr -> expr NOT_EQ . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 85
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 52

    (25) expr -> expr DIVIDE . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 86
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 53

    (26) expr -> expr TIMES . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 87
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 54

    (27) expr -> expr MINUS . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 88
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 55

    (28) expr -> expr PLUS . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 89
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 56

    (29) expr -> expr MOD . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 90
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 57

    (30) expr -> expr GREATER_EQUAL . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 91
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 58

    (31) expr -> expr LESS_EQUAL . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 92
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 59

    (32) expr -> expr GREATER_THAN . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 93
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 60

    (33) expr -> expr LESS_THAN . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 94
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 61

    (34) expr -> expr OR . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 95
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 62

    (35) expr -> expr AND . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 96
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 63

    (36) expr -> expr EQ . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 97
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 64

    (8) stmt -> defvar SEMI_COLON .

    IF              reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    FOR             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    RETURN          reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    LBRACE          reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    WHILE           reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    MINUS           reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    PLUS            reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    NOT             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    LSQUAREBR       reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    VAR             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    DEF             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    IDEN            reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    NUM             reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    RBRACE          reduce using rule 8 (stmt -> defvar SEMI_COLON .)
    ELSE            reduce using rule 8 (stmt -> defvar SEMI_COLON .)


state 65

    (9) stmt -> IF LPAREN . expr RPAREN stmt else_choice
    (10) stmt -> IF LPAREN . error RPAREN stmt else_choice
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    error           shift and go to state 99
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 98
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 66

    (14) stmt -> FOR LPAREN . expr TO expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 100
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 67

    (15) stmt -> RETURN expr . SEMI_COLON
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    SEMI_COLON      shift and go to state 101
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 68

    (17) stmt -> WHILE LPAREN . expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 102
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 69

    (40) expr -> LSQUAREBR clist . RSQUAREBR

    RSQUAREBR       shift and go to state 103


state 70

    (41) expr -> LSQUAREBR error . RSQUAREBR

    RSQUAREBR       shift and go to state 104


state 71

    (44) clist -> empty .

    RSQUAREBR       reduce using rule 44 (clist -> empty .)
    RPAREN          reduce using rule 44 (clist -> empty .)


state 72

    (45) clist -> expr .
    (46) clist -> expr . COMMA clist
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    RSQUAREBR       reduce using rule 45 (clist -> expr .)
    RPAREN          reduce using rule 45 (clist -> expr .)
    COMMA           shift and go to state 105
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 73

    (37) expr -> MINUS expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 37 (expr -> MINUS expr .)
    COMMA           reduce using rule 37 (expr -> MINUS expr .)
    RSQUAREBR       reduce using rule 37 (expr -> MINUS expr .)
    RPAREN          reduce using rule 37 (expr -> MINUS expr .)
    COLON           reduce using rule 37 (expr -> MINUS expr .)
    TO              reduce using rule 37 (expr -> MINUS expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! QMARK           [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! PARITY          [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! NOT_EQ          [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! TIMES           [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! MINUS           [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! PLUS            [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! MOD             [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! OR              [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! AND             [ reduce using rule 37 (expr -> MINUS expr .) ]
  ! EQ              [ reduce using rule 37 (expr -> MINUS expr .) ]


state 74

    (38) expr -> PLUS expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 38 (expr -> PLUS expr .)
    COMMA           reduce using rule 38 (expr -> PLUS expr .)
    RSQUAREBR       reduce using rule 38 (expr -> PLUS expr .)
    RPAREN          reduce using rule 38 (expr -> PLUS expr .)
    COLON           reduce using rule 38 (expr -> PLUS expr .)
    TO              reduce using rule 38 (expr -> PLUS expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! QMARK           [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! PARITY          [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! NOT_EQ          [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! TIMES           [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! MINUS           [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! PLUS            [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! MOD             [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! OR              [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! AND             [ reduce using rule 38 (expr -> PLUS expr .) ]
  ! EQ              [ reduce using rule 38 (expr -> PLUS expr .) ]


state 75

    (39) expr -> NOT expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 39 (expr -> NOT expr .)
    COMMA           reduce using rule 39 (expr -> NOT expr .)
    RSQUAREBR       reduce using rule 39 (expr -> NOT expr .)
    RPAREN          reduce using rule 39 (expr -> NOT expr .)
    COLON           reduce using rule 39 (expr -> NOT expr .)
    TO              reduce using rule 39 (expr -> NOT expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 39 (expr -> NOT expr .) ]
  ! QMARK           [ reduce using rule 39 (expr -> NOT expr .) ]
  ! PARITY          [ reduce using rule 39 (expr -> NOT expr .) ]
  ! NOT_EQ          [ reduce using rule 39 (expr -> NOT expr .) ]
  ! DIVIDE          [ reduce using rule 39 (expr -> NOT expr .) ]
  ! TIMES           [ reduce using rule 39 (expr -> NOT expr .) ]
  ! MINUS           [ reduce using rule 39 (expr -> NOT expr .) ]
  ! PLUS            [ reduce using rule 39 (expr -> NOT expr .) ]
  ! MOD             [ reduce using rule 39 (expr -> NOT expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 39 (expr -> NOT expr .) ]
  ! LESS_EQUAL      [ reduce using rule 39 (expr -> NOT expr .) ]
  ! GREATER_THAN    [ reduce using rule 39 (expr -> NOT expr .) ]
  ! LESS_THAN       [ reduce using rule 39 (expr -> NOT expr .) ]
  ! OR              [ reduce using rule 39 (expr -> NOT expr .) ]
  ! AND             [ reduce using rule 39 (expr -> NOT expr .) ]
  ! EQ              [ reduce using rule 39 (expr -> NOT expr .) ]


state 76

    (47) defvar -> VAR type . iden
    (48) defvar -> VAR type . iden EQ expr
    (52) iden -> . IDEN

    IDEN            shift and go to state 11

    iden                           shift and go to state 106

state 77

    (4) func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .

    DEF             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    $end            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    IF              reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    FOR             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    RETURN          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    LBRACE          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    WHILE           reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    MINUS           reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    PLUS            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    NOT             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    LSQUAREBR       reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    VAR             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    IDEN            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    NUM             reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    RBRACE          reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)
    ELSE            reduce using rule 4 (func -> DEF type iden LPAREN error RPAREN LBRACE body RBRACE .)


state 78

    (18) expr -> iden LPAREN clist . RPAREN

    RPAREN          shift and go to state 107


state 79

    (19) expr -> iden LPAREN error . RPAREN

    RPAREN          shift and go to state 108


state 80

    (16) stmt -> LBRACE body RBRACE .

    IF              reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    FOR             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    RETURN          reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    LBRACE          reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    WHILE           reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    MINUS           reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    PLUS            reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    NOT             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    LSQUAREBR       reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    VAR             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    DEF             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    IDEN            reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    NUM             reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    RBRACE          reduce using rule 16 (stmt -> LBRACE body RBRACE .)
    ELSE            reduce using rule 16 (stmt -> LBRACE body RBRACE .)


state 81

    (20) expr -> expr LSQUAREBR expr . RSQUAREBR
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    RSQUAREBR       shift and go to state 109
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 82

    (21) expr -> expr LSQUAREBR error . RSQUAREBR

    RSQUAREBR       shift and go to state 110


state 83

    (22) expr -> expr QMARK expr . COLON expr
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    COLON           shift and go to state 111
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 84

    (23) expr -> expr PARITY expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 23 (expr -> expr PARITY expr .)
    COMMA           reduce using rule 23 (expr -> expr PARITY expr .)
    RSQUAREBR       reduce using rule 23 (expr -> expr PARITY expr .)
    RPAREN          reduce using rule 23 (expr -> expr PARITY expr .)
    COLON           reduce using rule 23 (expr -> expr PARITY expr .)
    TO              reduce using rule 23 (expr -> expr PARITY expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! QMARK           [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! PARITY          [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! NOT_EQ          [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! DIVIDE          [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! TIMES           [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! MINUS           [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! PLUS            [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! MOD             [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! LESS_EQUAL      [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! GREATER_THAN    [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! LESS_THAN       [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! OR              [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! AND             [ reduce using rule 23 (expr -> expr PARITY expr .) ]
  ! EQ              [ reduce using rule 23 (expr -> expr PARITY expr .) ]


state 85

    (24) expr -> expr NOT_EQ expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 24 (expr -> expr NOT_EQ expr .)
    COMMA           reduce using rule 24 (expr -> expr NOT_EQ expr .)
    RSQUAREBR       reduce using rule 24 (expr -> expr NOT_EQ expr .)
    RPAREN          reduce using rule 24 (expr -> expr NOT_EQ expr .)
    COLON           reduce using rule 24 (expr -> expr NOT_EQ expr .)
    TO              reduce using rule 24 (expr -> expr NOT_EQ expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! QMARK           [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! PARITY          [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! NOT_EQ          [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! DIVIDE          [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! TIMES           [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! MINUS           [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! PLUS            [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! MOD             [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! LESS_EQUAL      [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! LESS_THAN       [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! OR              [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! AND             [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]
  ! EQ              [ reduce using rule 24 (expr -> expr NOT_EQ expr .) ]


state 86

    (25) expr -> expr DIVIDE expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 25 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 25 (expr -> expr DIVIDE expr .)
    RSQUAREBR       reduce using rule 25 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 25 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 25 (expr -> expr DIVIDE expr .)
    TO              reduce using rule 25 (expr -> expr DIVIDE expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! QMARK           [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! PARITY          [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! NOT_EQ          [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! TIMES           [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! MINUS           [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! MOD             [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! LESS_EQUAL      [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! GREATER_THAN    [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! LESS_THAN       [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]
  ! EQ              [ reduce using rule 25 (expr -> expr DIVIDE expr .) ]


state 87

    (26) expr -> expr TIMES expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 26 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 26 (expr -> expr TIMES expr .)
    RSQUAREBR       reduce using rule 26 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 26 (expr -> expr TIMES expr .)
    COLON           reduce using rule 26 (expr -> expr TIMES expr .)
    TO              reduce using rule 26 (expr -> expr TIMES expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! QMARK           [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! PARITY          [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! NOT_EQ          [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! TIMES           [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! MINUS           [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! PLUS            [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! LESS_EQUAL      [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! GREATER_THAN    [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! LESS_THAN       [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 26 (expr -> expr TIMES expr .) ]
  ! EQ              [ reduce using rule 26 (expr -> expr TIMES expr .) ]


state 88

    (27) expr -> expr MINUS expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 27 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 27 (expr -> expr MINUS expr .)
    RSQUAREBR       reduce using rule 27 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 27 (expr -> expr MINUS expr .)
    COLON           reduce using rule 27 (expr -> expr MINUS expr .)
    TO              reduce using rule 27 (expr -> expr MINUS expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! QMARK           [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! PARITY          [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! NOT_EQ          [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! MINUS           [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! PLUS            [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! LESS_THAN       [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 27 (expr -> expr MINUS expr .) ]
  ! EQ              [ reduce using rule 27 (expr -> expr MINUS expr .) ]


state 89

    (28) expr -> expr PLUS expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 28 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 28 (expr -> expr PLUS expr .)
    RSQUAREBR       reduce using rule 28 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 28 (expr -> expr PLUS expr .)
    COLON           reduce using rule 28 (expr -> expr PLUS expr .)
    TO              reduce using rule 28 (expr -> expr PLUS expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! QMARK           [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! PARITY          [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! NOT_EQ          [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! MINUS           [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! PLUS            [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! LESS_EQUAL      [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! GREATER_THAN    [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! LESS_THAN       [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 28 (expr -> expr PLUS expr .) ]
  ! EQ              [ reduce using rule 28 (expr -> expr PLUS expr .) ]


state 90

    (29) expr -> expr MOD expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 29 (expr -> expr MOD expr .)
    COMMA           reduce using rule 29 (expr -> expr MOD expr .)
    RSQUAREBR       reduce using rule 29 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 29 (expr -> expr MOD expr .)
    COLON           reduce using rule 29 (expr -> expr MOD expr .)
    TO              reduce using rule 29 (expr -> expr MOD expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! QMARK           [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! PARITY          [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! NOT_EQ          [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! GREATER_THAN    [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! LESS_THAN       [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! OR              [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! AND             [ reduce using rule 29 (expr -> expr MOD expr .) ]
  ! EQ              [ reduce using rule 29 (expr -> expr MOD expr .) ]


state 91

    (30) expr -> expr GREATER_EQUAL expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 30 (expr -> expr GREATER_EQUAL expr .)
    COMMA           reduce using rule 30 (expr -> expr GREATER_EQUAL expr .)
    RSQUAREBR       reduce using rule 30 (expr -> expr GREATER_EQUAL expr .)
    RPAREN          reduce using rule 30 (expr -> expr GREATER_EQUAL expr .)
    COLON           reduce using rule 30 (expr -> expr GREATER_EQUAL expr .)
    TO              reduce using rule 30 (expr -> expr GREATER_EQUAL expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! QMARK           [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! PARITY          [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! NOT_EQ          [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! MOD             [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! OR              [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! AND             [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]
  ! EQ              [ reduce using rule 30 (expr -> expr GREATER_EQUAL expr .) ]


state 92

    (31) expr -> expr LESS_EQUAL expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 31 (expr -> expr LESS_EQUAL expr .)
    COMMA           reduce using rule 31 (expr -> expr LESS_EQUAL expr .)
    RSQUAREBR       reduce using rule 31 (expr -> expr LESS_EQUAL expr .)
    RPAREN          reduce using rule 31 (expr -> expr LESS_EQUAL expr .)
    COLON           reduce using rule 31 (expr -> expr LESS_EQUAL expr .)
    TO              reduce using rule 31 (expr -> expr LESS_EQUAL expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! QMARK           [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! PARITY          [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! NOT_EQ          [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! TIMES           [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! PLUS            [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! MOD             [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS_EQUAL      [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! GREATER_THAN    [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! LESS_THAN       [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! OR              [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! AND             [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]
  ! EQ              [ reduce using rule 31 (expr -> expr LESS_EQUAL expr .) ]


state 93

    (32) expr -> expr GREATER_THAN expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 32 (expr -> expr GREATER_THAN expr .)
    COMMA           reduce using rule 32 (expr -> expr GREATER_THAN expr .)
    RSQUAREBR       reduce using rule 32 (expr -> expr GREATER_THAN expr .)
    RPAREN          reduce using rule 32 (expr -> expr GREATER_THAN expr .)
    COLON           reduce using rule 32 (expr -> expr GREATER_THAN expr .)
    TO              reduce using rule 32 (expr -> expr GREATER_THAN expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! QMARK           [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! PARITY          [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! NOT_EQ          [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! PLUS            [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! OR              [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! AND             [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]
  ! EQ              [ reduce using rule 32 (expr -> expr GREATER_THAN expr .) ]


state 94

    (33) expr -> expr LESS_THAN expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 33 (expr -> expr LESS_THAN expr .)
    COMMA           reduce using rule 33 (expr -> expr LESS_THAN expr .)
    RSQUAREBR       reduce using rule 33 (expr -> expr LESS_THAN expr .)
    RPAREN          reduce using rule 33 (expr -> expr LESS_THAN expr .)
    COLON           reduce using rule 33 (expr -> expr LESS_THAN expr .)
    TO              reduce using rule 33 (expr -> expr LESS_THAN expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! QMARK           [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! PARITY          [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! NOT_EQ          [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! TIMES           [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! PLUS            [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! MOD             [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! LESS_EQUAL      [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! GREATER_THAN    [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! LESS_THAN       [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! OR              [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! AND             [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]
  ! EQ              [ reduce using rule 33 (expr -> expr LESS_THAN expr .) ]


state 95

    (34) expr -> expr OR expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 34 (expr -> expr OR expr .)
    COMMA           reduce using rule 34 (expr -> expr OR expr .)
    RSQUAREBR       reduce using rule 34 (expr -> expr OR expr .)
    RPAREN          reduce using rule 34 (expr -> expr OR expr .)
    COLON           reduce using rule 34 (expr -> expr OR expr .)
    TO              reduce using rule 34 (expr -> expr OR expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! QMARK           [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! PARITY          [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! NOT_EQ          [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! GREATER_THAN    [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! LESS_THAN       [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! OR              [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 34 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 34 (expr -> expr OR expr .) ]


state 96

    (35) expr -> expr AND expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 35 (expr -> expr AND expr .)
    COMMA           reduce using rule 35 (expr -> expr AND expr .)
    RSQUAREBR       reduce using rule 35 (expr -> expr AND expr .)
    RPAREN          reduce using rule 35 (expr -> expr AND expr .)
    COLON           reduce using rule 35 (expr -> expr AND expr .)
    TO              reduce using rule 35 (expr -> expr AND expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! QMARK           [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! PARITY          [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! NOT_EQ          [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! LESS_EQUAL      [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! GREATER_THAN    [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! LESS_THAN       [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! OR              [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! AND             [ reduce using rule 35 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 35 (expr -> expr AND expr .) ]


state 97

    (36) expr -> expr EQ expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 36 (expr -> expr EQ expr .)
    COMMA           reduce using rule 36 (expr -> expr EQ expr .)
    RSQUAREBR       reduce using rule 36 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 36 (expr -> expr EQ expr .)
    COLON           reduce using rule 36 (expr -> expr EQ expr .)
    TO              reduce using rule 36 (expr -> expr EQ expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! QMARK           [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! PARITY          [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! NOT_EQ          [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! LESS_EQUAL      [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! GREATER_THAN    [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! LESS_THAN       [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! OR              [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! AND             [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! EQ              [ reduce using rule 36 (expr -> expr EQ expr .) ]


state 98

    (9) stmt -> IF LPAREN expr . RPAREN stmt else_choice
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    RPAREN          shift and go to state 112
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 99

    (10) stmt -> IF LPAREN error . RPAREN stmt else_choice

    RPAREN          shift and go to state 113


state 100

    (14) stmt -> FOR LPAREN expr . TO expr RPAREN stmt
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    TO              shift and go to state 114
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 101

    (15) stmt -> RETURN expr SEMI_COLON .

    IF              reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    FOR             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    RETURN          reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    LBRACE          reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    WHILE           reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    MINUS           reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    PLUS            reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    NOT             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    LSQUAREBR       reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    VAR             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    DEF             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    IDEN            reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    NUM             reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    RBRACE          reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)
    ELSE            reduce using rule 15 (stmt -> RETURN expr SEMI_COLON .)


state 102

    (17) stmt -> WHILE LPAREN expr . RPAREN stmt
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    RPAREN          shift and go to state 115
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 103

    (40) expr -> LSQUAREBR clist RSQUAREBR .

    SEMI_COLON      reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    LSQUAREBR       reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    QMARK           reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    PARITY          reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    NOT_EQ          reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    DIVIDE          reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    TIMES           reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    MINUS           reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    PLUS            reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    MOD             reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    GREATER_EQUAL   reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    LESS_EQUAL      reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    GREATER_THAN    reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    LESS_THAN       reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    OR              reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    AND             reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    EQ              reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    COMMA           reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    RSQUAREBR       reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    RPAREN          reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    COLON           reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)
    TO              reduce using rule 40 (expr -> LSQUAREBR clist RSQUAREBR .)


state 104

    (41) expr -> LSQUAREBR error RSQUAREBR .

    SEMI_COLON      reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    LSQUAREBR       reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    QMARK           reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    PARITY          reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    NOT_EQ          reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    DIVIDE          reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    TIMES           reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    MINUS           reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    PLUS            reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    MOD             reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    GREATER_EQUAL   reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    LESS_EQUAL      reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    GREATER_THAN    reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    LESS_THAN       reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    OR              reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    AND             reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    EQ              reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    COMMA           reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    RSQUAREBR       reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    RPAREN          reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    COLON           reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)
    TO              reduce using rule 41 (expr -> LSQUAREBR error RSQUAREBR .)


state 105

    (46) clist -> expr COMMA . clist
    (44) clist -> . empty
    (45) clist -> . expr
    (46) clist -> . expr COMMA clist
    (58) empty -> .
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    RSQUAREBR       reduce using rule 58 (empty -> .)
    RPAREN          reduce using rule 58 (empty -> .)
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 72
    clist                          shift and go to state 116
    empty                          shift and go to state 71
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 106

    (47) defvar -> VAR type iden .
    (48) defvar -> VAR type iden . EQ expr

    SEMI_COLON      reduce using rule 47 (defvar -> VAR type iden .)
    EQ              shift and go to state 117


state 107

    (18) expr -> iden LPAREN clist RPAREN .

    SEMI_COLON      reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    LSQUAREBR       reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    QMARK           reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    PARITY          reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    NOT_EQ          reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    DIVIDE          reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    TIMES           reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    MINUS           reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    PLUS            reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    MOD             reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    GREATER_EQUAL   reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    LESS_EQUAL      reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    GREATER_THAN    reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    LESS_THAN       reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    OR              reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    AND             reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    EQ              reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    COMMA           reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    RSQUAREBR       reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    RPAREN          reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    COLON           reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)
    TO              reduce using rule 18 (expr -> iden LPAREN clist RPAREN .)


state 108

    (19) expr -> iden LPAREN error RPAREN .

    SEMI_COLON      reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    LSQUAREBR       reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    QMARK           reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    PARITY          reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    NOT_EQ          reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    DIVIDE          reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    TIMES           reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    MINUS           reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    PLUS            reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    MOD             reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    GREATER_EQUAL   reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    LESS_EQUAL      reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    GREATER_THAN    reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    LESS_THAN       reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    OR              reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    AND             reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    EQ              reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    COMMA           reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    RSQUAREBR       reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    RPAREN          reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    COLON           reduce using rule 19 (expr -> iden LPAREN error RPAREN .)
    TO              reduce using rule 19 (expr -> iden LPAREN error RPAREN .)


state 109

    (20) expr -> expr LSQUAREBR expr RSQUAREBR .

    SEMI_COLON      reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LSQUAREBR       reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    QMARK           reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    PARITY          reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    NOT_EQ          reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    DIVIDE          reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TIMES           reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MINUS           reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    PLUS            reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    MOD             reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_EQUAL   reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_EQUAL      reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    GREATER_THAN    reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    LESS_THAN       reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    OR              reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    AND             reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    EQ              reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COMMA           reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RSQUAREBR       reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    RPAREN          reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    COLON           reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)
    TO              reduce using rule 20 (expr -> expr LSQUAREBR expr RSQUAREBR .)


state 110

    (21) expr -> expr LSQUAREBR error RSQUAREBR .

    SEMI_COLON      reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    LSQUAREBR       reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    QMARK           reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    PARITY          reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    NOT_EQ          reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    DIVIDE          reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    TIMES           reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    MINUS           reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    PLUS            reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    MOD             reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    GREATER_EQUAL   reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    LESS_EQUAL      reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    GREATER_THAN    reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    LESS_THAN       reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    OR              reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    AND             reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    EQ              reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    COMMA           reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    RSQUAREBR       reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    RPAREN          reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    COLON           reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)
    TO              reduce using rule 21 (expr -> expr LSQUAREBR error RSQUAREBR .)


state 111

    (22) expr -> expr QMARK expr COLON . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 118
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 112

    (9) stmt -> IF LPAREN expr RPAREN . stmt else_choice
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (47) defvar -> . VAR type iden
    (48) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN
    (57) num -> . NUM

    IF              shift and go to state 30
    FOR             shift and go to state 32
    RETURN          shift and go to state 33
    LBRACE          shift and go to state 25
    WHILE           shift and go to state 34
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    VAR             shift and go to state 40
    DEF             shift and go to state 3
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 28
    stmt                           shift and go to state 119
    defvar                         shift and go to state 29
    func                           shift and go to state 31
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 113

    (10) stmt -> IF LPAREN error RPAREN . stmt else_choice
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (47) defvar -> . VAR type iden
    (48) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN
    (57) num -> . NUM

    IF              shift and go to state 30
    FOR             shift and go to state 32
    RETURN          shift and go to state 33
    LBRACE          shift and go to state 25
    WHILE           shift and go to state 34
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    VAR             shift and go to state 40
    DEF             shift and go to state 3
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    stmt                           shift and go to state 120
    expr                           shift and go to state 28
    defvar                         shift and go to state 29
    func                           shift and go to state 31
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 114

    (14) stmt -> FOR LPAREN expr TO . expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 121
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 115

    (17) stmt -> WHILE LPAREN expr RPAREN . stmt
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (47) defvar -> . VAR type iden
    (48) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN
    (57) num -> . NUM

    IF              shift and go to state 30
    FOR             shift and go to state 32
    RETURN          shift and go to state 33
    LBRACE          shift and go to state 25
    WHILE           shift and go to state 34
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    VAR             shift and go to state 40
    DEF             shift and go to state 3
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 28
    stmt                           shift and go to state 122
    defvar                         shift and go to state 29
    func                           shift and go to state 31
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 116

    (46) clist -> expr COMMA clist .

    RSQUAREBR       reduce using rule 46 (clist -> expr COMMA clist .)
    RPAREN          reduce using rule 46 (clist -> expr COMMA clist .)


state 117

    (48) defvar -> VAR type iden EQ . expr
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (52) iden -> . IDEN
    (57) num -> . NUM

    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    iden                           shift and go to state 24
    expr                           shift and go to state 123
    num                            shift and go to state 39

state 118

    (22) expr -> expr QMARK expr COLON expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for LSQUAREBR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
  ! shift/reduce conflict for PARITY resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
    SEMI_COLON      reduce using rule 22 (expr -> expr QMARK expr COLON expr .)
    COMMA           reduce using rule 22 (expr -> expr QMARK expr COLON expr .)
    RSQUAREBR       reduce using rule 22 (expr -> expr QMARK expr COLON expr .)
    RPAREN          reduce using rule 22 (expr -> expr QMARK expr COLON expr .)
    COLON           reduce using rule 22 (expr -> expr QMARK expr COLON expr .)
    TO              reduce using rule 22 (expr -> expr QMARK expr COLON expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63

  ! LSQUAREBR       [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! QMARK           [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! PARITY          [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! NOT_EQ          [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! TIMES           [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! MINUS           [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! PLUS            [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! MOD             [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! GREATER_EQUAL   [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! LESS_EQUAL      [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! GREATER_THAN    [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! LESS_THAN       [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! OR              [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! AND             [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]
  ! EQ              [ reduce using rule 22 (expr -> expr QMARK expr COLON expr .) ]


state 119

    (9) stmt -> IF LPAREN expr RPAREN stmt . else_choice
    (11) else_choice -> . empty
    (12) else_choice -> . ELSE stmt
    (58) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 126
    IF              reduce using rule 58 (empty -> .)
    FOR             reduce using rule 58 (empty -> .)
    RETURN          reduce using rule 58 (empty -> .)
    LBRACE          reduce using rule 58 (empty -> .)
    WHILE           reduce using rule 58 (empty -> .)
    MINUS           reduce using rule 58 (empty -> .)
    PLUS            reduce using rule 58 (empty -> .)
    NOT             reduce using rule 58 (empty -> .)
    LSQUAREBR       reduce using rule 58 (empty -> .)
    VAR             reduce using rule 58 (empty -> .)
    DEF             reduce using rule 58 (empty -> .)
    IDEN            reduce using rule 58 (empty -> .)
    NUM             reduce using rule 58 (empty -> .)
    RBRACE          reduce using rule 58 (empty -> .)

  ! ELSE            [ reduce using rule 58 (empty -> .) ]

    else_choice                    shift and go to state 124
    empty                          shift and go to state 125

state 120

    (10) stmt -> IF LPAREN error RPAREN stmt . else_choice
    (11) else_choice -> . empty
    (12) else_choice -> . ELSE stmt
    (58) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 126
    IF              reduce using rule 58 (empty -> .)
    FOR             reduce using rule 58 (empty -> .)
    RETURN          reduce using rule 58 (empty -> .)
    LBRACE          reduce using rule 58 (empty -> .)
    WHILE           reduce using rule 58 (empty -> .)
    MINUS           reduce using rule 58 (empty -> .)
    PLUS            reduce using rule 58 (empty -> .)
    NOT             reduce using rule 58 (empty -> .)
    LSQUAREBR       reduce using rule 58 (empty -> .)
    VAR             reduce using rule 58 (empty -> .)
    DEF             reduce using rule 58 (empty -> .)
    IDEN            reduce using rule 58 (empty -> .)
    NUM             reduce using rule 58 (empty -> .)
    RBRACE          reduce using rule 58 (empty -> .)

  ! ELSE            [ reduce using rule 58 (empty -> .) ]

    else_choice                    shift and go to state 127
    empty                          shift and go to state 125

state 121

    (14) stmt -> FOR LPAREN expr TO expr . RPAREN stmt
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    RPAREN          shift and go to state 128
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 122

    (17) stmt -> WHILE LPAREN expr RPAREN stmt .

    IF              reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    FOR             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RETURN          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LBRACE          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    WHILE           reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    MINUS           reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    PLUS            reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NOT             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    LSQUAREBR       reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    VAR             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    DEF             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    IDEN            reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    NUM             reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    RBRACE          reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)
    ELSE            reduce using rule 17 (stmt -> WHILE LPAREN expr RPAREN stmt .)


state 123

    (48) defvar -> VAR type iden EQ expr .
    (20) expr -> expr . LSQUAREBR expr RSQUAREBR
    (21) expr -> expr . LSQUAREBR error RSQUAREBR
    (22) expr -> expr . QMARK expr COLON expr
    (23) expr -> expr . PARITY expr
    (24) expr -> expr . NOT_EQ expr
    (25) expr -> expr . DIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MINUS expr
    (28) expr -> expr . PLUS expr
    (29) expr -> expr . MOD expr
    (30) expr -> expr . GREATER_EQUAL expr
    (31) expr -> expr . LESS_EQUAL expr
    (32) expr -> expr . GREATER_THAN expr
    (33) expr -> expr . LESS_THAN expr
    (34) expr -> expr . OR expr
    (35) expr -> expr . AND expr
    (36) expr -> expr . EQ expr

    SEMI_COLON      reduce using rule 48 (defvar -> VAR type iden EQ expr .)
    LSQUAREBR       shift and go to state 48
    QMARK           shift and go to state 49
    PARITY          shift and go to state 50
    NOT_EQ          shift and go to state 51
    DIVIDE          shift and go to state 52
    TIMES           shift and go to state 53
    MINUS           shift and go to state 54
    PLUS            shift and go to state 55
    MOD             shift and go to state 56
    GREATER_EQUAL   shift and go to state 57
    LESS_EQUAL      shift and go to state 58
    GREATER_THAN    shift and go to state 59
    LESS_THAN       shift and go to state 60
    OR              shift and go to state 61
    AND             shift and go to state 62
    EQ              shift and go to state 63


state 124

    (9) stmt -> IF LPAREN expr RPAREN stmt else_choice .

    IF              reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    FOR             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RETURN          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LBRACE          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    WHILE           reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    MINUS           reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    PLUS            reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NOT             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    LSQUAREBR       reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    VAR             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    DEF             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    IDEN            reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    NUM             reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    RBRACE          reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)
    ELSE            reduce using rule 9 (stmt -> IF LPAREN expr RPAREN stmt else_choice .)


state 125

    (11) else_choice -> empty .

    ELSE            reduce using rule 11 (else_choice -> empty .)
    IF              reduce using rule 11 (else_choice -> empty .)
    FOR             reduce using rule 11 (else_choice -> empty .)
    RETURN          reduce using rule 11 (else_choice -> empty .)
    LBRACE          reduce using rule 11 (else_choice -> empty .)
    WHILE           reduce using rule 11 (else_choice -> empty .)
    MINUS           reduce using rule 11 (else_choice -> empty .)
    PLUS            reduce using rule 11 (else_choice -> empty .)
    NOT             reduce using rule 11 (else_choice -> empty .)
    LSQUAREBR       reduce using rule 11 (else_choice -> empty .)
    VAR             reduce using rule 11 (else_choice -> empty .)
    DEF             reduce using rule 11 (else_choice -> empty .)
    IDEN            reduce using rule 11 (else_choice -> empty .)
    NUM             reduce using rule 11 (else_choice -> empty .)
    RBRACE          reduce using rule 11 (else_choice -> empty .)


state 126

    (12) else_choice -> ELSE . stmt
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (47) defvar -> . VAR type iden
    (48) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN
    (57) num -> . NUM

    IF              shift and go to state 30
    FOR             shift and go to state 32
    RETURN          shift and go to state 33
    LBRACE          shift and go to state 25
    WHILE           shift and go to state 34
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    VAR             shift and go to state 40
    DEF             shift and go to state 3
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    stmt                           shift and go to state 129
    expr                           shift and go to state 28
    defvar                         shift and go to state 29
    func                           shift and go to state 31
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 127

    (10) stmt -> IF LPAREN error RPAREN stmt else_choice .

    IF              reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    FOR             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RETURN          reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LBRACE          reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    WHILE           reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    MINUS           reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    PLUS            reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NOT             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    LSQUAREBR       reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    VAR             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    DEF             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    IDEN            reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    NUM             reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    RBRACE          reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)
    ELSE            reduce using rule 10 (stmt -> IF LPAREN error RPAREN stmt else_choice .)


state 128

    (14) stmt -> FOR LPAREN expr TO expr RPAREN . stmt
    (7) stmt -> . expr SEMI_COLON
    (8) stmt -> . defvar SEMI_COLON
    (9) stmt -> . IF LPAREN expr RPAREN stmt else_choice
    (10) stmt -> . IF LPAREN error RPAREN stmt else_choice
    (13) stmt -> . func
    (14) stmt -> . FOR LPAREN expr TO expr RPAREN stmt
    (15) stmt -> . RETURN expr SEMI_COLON
    (16) stmt -> . LBRACE body RBRACE
    (17) stmt -> . WHILE LPAREN expr RPAREN stmt
    (18) expr -> . iden LPAREN clist RPAREN
    (19) expr -> . iden LPAREN error RPAREN
    (20) expr -> . expr LSQUAREBR expr RSQUAREBR
    (21) expr -> . expr LSQUAREBR error RSQUAREBR
    (22) expr -> . expr QMARK expr COLON expr
    (23) expr -> . expr PARITY expr
    (24) expr -> . expr NOT_EQ expr
    (25) expr -> . expr DIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MINUS expr
    (28) expr -> . expr PLUS expr
    (29) expr -> . expr MOD expr
    (30) expr -> . expr GREATER_EQUAL expr
    (31) expr -> . expr LESS_EQUAL expr
    (32) expr -> . expr GREATER_THAN expr
    (33) expr -> . expr LESS_THAN expr
    (34) expr -> . expr OR expr
    (35) expr -> . expr AND expr
    (36) expr -> . expr EQ expr
    (37) expr -> . MINUS expr
    (38) expr -> . PLUS expr
    (39) expr -> . NOT expr
    (40) expr -> . LSQUAREBR clist RSQUAREBR
    (41) expr -> . LSQUAREBR error RSQUAREBR
    (42) expr -> . iden
    (43) expr -> . num
    (47) defvar -> . VAR type iden
    (48) defvar -> . VAR type iden EQ expr
    (3) func -> . DEF type iden LPAREN flist RPAREN LBRACE body RBRACE
    (4) func -> . DEF type iden LPAREN error RPAREN LBRACE body RBRACE
    (52) iden -> . IDEN
    (57) num -> . NUM

    IF              shift and go to state 30
    FOR             shift and go to state 32
    RETURN          shift and go to state 33
    LBRACE          shift and go to state 25
    WHILE           shift and go to state 34
    MINUS           shift and go to state 36
    PLUS            shift and go to state 37
    NOT             shift and go to state 38
    LSQUAREBR       shift and go to state 35
    VAR             shift and go to state 40
    DEF             shift and go to state 3
    IDEN            shift and go to state 11
    NUM             shift and go to state 41

    expr                           shift and go to state 28
    stmt                           shift and go to state 130
    defvar                         shift and go to state 29
    func                           shift and go to state 31
    iden                           shift and go to state 24
    num                            shift and go to state 39

state 129

    (12) else_choice -> ELSE stmt .

    ELSE            reduce using rule 12 (else_choice -> ELSE stmt .)
    IF              reduce using rule 12 (else_choice -> ELSE stmt .)
    FOR             reduce using rule 12 (else_choice -> ELSE stmt .)
    RETURN          reduce using rule 12 (else_choice -> ELSE stmt .)
    LBRACE          reduce using rule 12 (else_choice -> ELSE stmt .)
    WHILE           reduce using rule 12 (else_choice -> ELSE stmt .)
    MINUS           reduce using rule 12 (else_choice -> ELSE stmt .)
    PLUS            reduce using rule 12 (else_choice -> ELSE stmt .)
    NOT             reduce using rule 12 (else_choice -> ELSE stmt .)
    LSQUAREBR       reduce using rule 12 (else_choice -> ELSE stmt .)
    VAR             reduce using rule 12 (else_choice -> ELSE stmt .)
    DEF             reduce using rule 12 (else_choice -> ELSE stmt .)
    IDEN            reduce using rule 12 (else_choice -> ELSE stmt .)
    NUM             reduce using rule 12 (else_choice -> ELSE stmt .)
    RBRACE          reduce using rule 12 (else_choice -> ELSE stmt .)


state 130

    (14) stmt -> FOR LPAREN expr TO expr RPAREN stmt .

    IF              reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    FOR             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    RETURN          reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    LBRACE          reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    WHILE           reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    MINUS           reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    PLUS            reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    NOT             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    LSQUAREBR       reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    VAR             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    DEF             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    IDEN            reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    NUM             reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    RBRACE          reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)
    ELSE            reduce using rule 14 (stmt -> FOR LPAREN expr TO expr RPAREN stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQUAREBR in state 73 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 73 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 73 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 73 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MOD in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 73 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for EQ in state 73 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 74 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 74 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 74 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 74 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MOD in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 74 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for EQ in state 74 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 75 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 75 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 75 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 75 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MOD in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 75 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 75 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for EQ in state 75 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 84 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 84 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 84 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MOD in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 84 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 84 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 84 resolved as shift
WARNING: shift/reduce conflict for OR in state 84 resolved as shift
WARNING: shift/reduce conflict for AND in state 84 resolved as shift
WARNING: shift/reduce conflict for EQ in state 84 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 85 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 85 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 85 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 85 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 85 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 85 resolved as shift
WARNING: shift/reduce conflict for MOD in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 85 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for EQ in state 85 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 86 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 86 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 86 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 86 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 86 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 86 resolved as shift
WARNING: shift/reduce conflict for MOD in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 86 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 86 resolved as shift
WARNING: shift/reduce conflict for OR in state 86 resolved as shift
WARNING: shift/reduce conflict for AND in state 86 resolved as shift
WARNING: shift/reduce conflict for EQ in state 86 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 87 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 87 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 87 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MOD in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for EQ in state 87 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 88 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 88 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 88 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 88 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 88 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 88 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 88 resolved as shift
WARNING: shift/reduce conflict for MOD in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 88 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 88 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 88 resolved as shift
WARNING: shift/reduce conflict for OR in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 88 resolved as shift
WARNING: shift/reduce conflict for EQ in state 88 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 89 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 89 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 89 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 89 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 89 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 89 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 89 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 89 resolved as shift
WARNING: shift/reduce conflict for MOD in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 89 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 89 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for EQ in state 89 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 90 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 90 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 90 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 90 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 90 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 90 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 90 resolved as shift
WARNING: shift/reduce conflict for MOD in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 90 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 90 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 90 resolved as shift
WARNING: shift/reduce conflict for OR in state 90 resolved as shift
WARNING: shift/reduce conflict for AND in state 90 resolved as shift
WARNING: shift/reduce conflict for EQ in state 90 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 91 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 91 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 91 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 91 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MOD in state 91 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 91 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 91 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 91 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 91 resolved as shift
WARNING: shift/reduce conflict for OR in state 91 resolved as shift
WARNING: shift/reduce conflict for AND in state 91 resolved as shift
WARNING: shift/reduce conflict for EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 92 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 92 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 92 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MOD in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 92 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for EQ in state 92 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 93 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 93 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 93 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MOD in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 93 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for EQ in state 93 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 94 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 94 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 94 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MOD in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 94 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for EQ in state 94 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 95 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 95 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 95 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 95 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MOD in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 95 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for EQ in state 95 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 96 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 96 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 96 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MOD in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 96 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 97 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 97 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 97 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MOD in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 97 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for LSQUAREBR in state 118 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 118 resolved as shift
WARNING: shift/reduce conflict for PARITY in state 118 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MOD in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 118 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for EQ in state 118 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 119 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 120 resolved as shift
